#!/usr/bin/env node

const
  _libcrash =
  require(
    '../libcrash-js/crash-js');
_dirname =
  _libcrash._dirname;
_file_read =
  _libcrash._file_read;
_path_join =
  _libcrash._path_join;
_msg_info =
  _libcrash._msg_info;
_msg_error =
  _libcrash._msg_error;
const
  _evm_contract_call =
  require(
    '../evm-contracts-tools/evm-contract-call-dynamic');
_contract_run =
  _evm_contract_call._contract_run

function
  _global_variables() {
  wallet_seed_path =
    "";
  api_key_path =
    "";
  target_network =
    "";
  contract_address =
    "";
  contract_abi_path =
    "";
  contract_bytecode_path =
    "";
  file_hash =
    "";
  publication_namespace =
    "";
  file_chunks =
    [];
  quiet =
    "";
}

function
  _msg_info_chunk_publish(
    _chunk,
    _total) {
  let
    _msg,
    _template;
  _template =
    "publishing chunk '{_chunk}' of '{_total}'";
  _msg =
    _template.replaceAll(
      "{_chunk}",
      _chunk);
  _msg =
    _msg.replaceAll(
      "{_total}",
      _total);
  _msg_info(
    _msg);
}

function
  _msg_info_chunk_published(
    _chunk,
    _total) {
  let
    _msg,
    _template;
  _template =
    "published chunk '{_chunk}' of '{_total}'";
  _msg =
    _template.replaceAll(
      "{_chunk}",
      _chunk);
  _msg =
    _msg.replaceAll(
      "{_total}",
      _total);
  _msg_info(
    _msg);
}

async function
  _chunk_publish(
    _contract_run_opts) {
  let _tx;
  try {
    _tx = await
      _contract_run.apply(
        null,
        _contract_run_opts);
  } catch(e) {
    _msg_error(
      e,
      1);
  }
  return _tx;
}

async function
  _publish(
    _wallet_seed_path,
    _api_key_path,
    _target_network,
    _contract_address,
    _contract_abi_path,
    _contract_bytecode_path,
    _publication_namespace,
    _file_hash,
    _file_chunks
  ) {
  let
    _contract_run_base_opts,
    _contract_run_opts,
    _chunk,
    _file_chunk,
    _file_chunk_path,
    _method_args,
    _msg,
    _total_chunks,
    _tx,
    _wallet_password;
  _wallet_password =
    "";
  _contract_run_base_opts = [
    _wallet_seed_path,
    _wallet_password,
    _api_key_path,
    _target_network,
    _contract_address,
    _contract_abi_path,
    _contract_bytecode_path,
    "publishChunk",
  ];
  _method_base_args = [
    _publication_namespace,
    _file_hash
  ];
  _total_chunks =
    _file_chunks.length;
  for ( _chunk in _file_chunks ) {
    _msg_info_chunk_publish(
      _chunk,
      _total_chunks);
    _file_chunk_path =
      _file_chunks[_chunk];
    _file_chunk =
      _file_read(
        _file_chunk_path);
    _contract_run_opts =
      _contract_run_base_opts;
    _method_args =
      _method_base_args;
    _method_args.push(
      _chunk);
    _method_args.push(
      _file_chunk);
    _contract_run_opts.push(
      _method_args);
    _tx = await
      _chunk_publish(
        _contract_run_opts);
    _msg_info_chunk_published(
      _chunk,
      _total_chunks);
  }
}

function
  _config_show() {
  let
    _file_chunks,
    _line,
    _text;
  _text = 
    [];
  _text.push(
    "          Wallet seed: {wallet_seed_path}".replace(
      "{wallet_seed_path}",
      wallet_seed_path));
  _text.push(
    "              API Key: {api_key_path}".replace(
      "{api_key_path}",
      api_key_path));
  _text.push(
    "       Target network: {target_network}".replace(
      "{target_network}",
      target_network));
  _text.push(
    "     Contract address: {contract_address}".replace(
      "{contract_address}",
      contract_address));
  _text.push(
    "         Contract ABI: {contract_abi_path}".replace(
      "{contract_abi_path}",
      contract_abi_path));
  _text.push(
    "    Contract bytecode: {contract_bytecode_path}".replace(
      "{contract_bytecode_path}",
      contract_bytecode_path));
  _text.push(
    "            File hash: {file_hash}".replace(
      "{file_hash}",
      file_hash));
  _text.push(
    "Publication namespace: {file_hash}".replace(
      "{file_hash}",
      file_hash));
  _file_chunks =
    file_chunks.join(
    " ");
  _text.push(
    "      File chunks: {_file_chunks}".replace(
      "{_file_chunks}",
      _file_chunks));
  for ( _line in _text ) {
    _msg_info(
      _text[_line]);
  }
}

function
  _usage() {
  let
    _line,
    _text;
  _text = [
    "Usage:",
    "  publish",
    "    <quiet>",
    "    <wallet_seed_path>",
    "    <api_key_path>",
    "    <target_network>",
    "    <contract_address>",
    "    <contract_abi_path>",
    "    <contract_bytecode_path>",
    "    <file_hash>",
    "    [file_chunk]",
    "",
    "Args:",
    "  <quiet>                   Can be 'y' or 'n'",
    "                            Default: y",
    "  <wallet_seed_path>        Path of the file containing",
    "                            the seed phrase.",
    "  <api_key_path>            Path of the API key for the",
    "                            contract ABI provider service.",
    "  <target_network>          Network on which the contract",
    "                            resides.",
    "  <contract_address>        Address of the contract.",
    "  <contract_abi_path>       Contract ABI path.",
    "  <contract_bytecode_path>  Path for the contract bytecode.",
    "  <publication_namespace>   Namespace in which the file will be",
    "                            published.",
    "  <file_hash>               Hash of the file to publish.",
    "  [file_chunks]             File chunks to publish.",
  ];
  for ( _line of _text ) {
    _msg_info(
      _line);
  }
  process.exit();
}


function 
  _cmdline_parse() {
  quiet = 
    "y";
  process.argv.forEach(
    function (
      _value,
      _index,
      _array) {
      if ( _index == 2 ) {
        quiet =
          _value;
      }
      if ( _index == 3 ) {
        wallet_seed_path =
          _value;
      }
      if ( _index == 4 ) {
        api_key_path =
          _value;
      }
      if ( _index == 5 ) {
        target_network =
          _value;
      }
      if ( _index == 6 ) {
        contract_address =
          _value;
      }
      if ( _index == 7 ) {
        contract_abi_path =
          _value;
      }
      if ( _index == 8 ) {
        contract_bytecode_path =
          _value;
      }
      if ( _index == 9 ) {
        file_hash =
          _value;
      }
      if ( _index == 10 ) {
        publication_namespace =
          _value;
      }
      if ( 10 < _index ) {
	file_chunks.push(
          _value);
      }
      if ( _value == "-h" ||
           _value == "--help" ) {
        _usage();
      }
  });
  if ( file_hash == "" ||
       publication_namespace  == "" ||
       file_chunks == [] ) {
    _usage();
  }
}

_global_variables();

if ( require.main == module ) {
  _cmdline_parse();
  _config_show();
  app_opts = [
    wallet_seed_path,
    api_key_path,
    target_network,
    contract_address,
    contract_abi_path,
    contract_bytecode_path,
    publication_namespace,
    file_hash,
    file_chunks,
  ];
  _publish.apply(
    null,
    app_opts);
}

module.exports = {
  _publish:
    _publish
};
