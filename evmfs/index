#!/usr/bin/env node

// SPDX-License-Identifier: AGPL-3.0-or-later

//    ----------------------------------------------------------------------
//    Copyright Â© 2024, 2025  Pellegrino Prevete
//
//    All rights reserved
//    ----------------------------------------------------------------------
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as published
//    by the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <https://www.gnu.org/licenses/>.

const
  _libcrash =
    require(
      "../libcrash-js/crash-js");
_dirname =
  _libcrash._dirname;
_file_write =
  _libcrash._file_write;
_msg_info =
  _libcrash._msg_info;
_msg_error =
  _libcrash._msg_error;
const
  _evm_contract_call_dynamic_module =
    require(
      '../evm-contracts-tools/evm-contract-call-dynamic');
_contract_run =
  _evm_contract_call_dynamic_module._contract_run;
const
  _ccget_module =
    require(
      "./ccget");
_chain_id_read =
  _ccget_module._chain_id_read;
_fs_address_read =
  _ccget_module._fs_address_read;

function
  _global_variables() {
  app_name =
    "index";
  retries_max =
    "";
  call_timeout =
    "";
  wallet_seed_path =
    "";
  api_key_path =
    "";
  target_network =
    "";
  contract_address =
    "";
  contract_abi_path =
    "";
  contract_bytecode_path =
    "";
  contract_compiler_output_path =
    "";
  publication_namespace =
    "";
  file_hash =
    "";
  index_start =
    "";
  index_end =
    "";
  chunk_chain_id =
    "";
  chunk_fs_address =
    "";
  checkpoint_file_path =
    "";
  quiet =
    "";
}

function
  _msg_info_chunk_index(
    _index,
    _progress,
    _total) {
  let
    _msg,
    _template;
  _template =
    "Indexing chunk '{_index}'" +
    "('{_progress}'of '{_total}').";
  _msg =
    _template.replaceAll(
      "{_index}",
      _index);
  _msg =
    _msg.replaceAll(
      "{_progress}",
      _progress);
  _msg =
    _msg.replaceAll(
      "{_total}",
      _total);
  _msg_info(
    _msg);
}

function
  _msg_info_chunk_indexed(
    _index,
    _progress,
    _total) {
  let
    _msg,
    _template;
  _template =
    "Indexed chunk '{_index}' ('{_progress}'of '{_total}').";
  _msg =
    _template.replaceAll(
      "{_index}",
      _index);
  _msg =
    _msg.replaceAll(
      "{_progress}",
      _progress);
  _msg =
    _msg.replaceAll(
      "{_total}",
      _total);
  _msg_info(
    _msg);
}

function
  _error_handle(
    error) {
  let
    _message;
  if ( "error" in error &&
       error["error"] != undefined &&
       "message" in error["error"] ) {
    _message =
      error["error"]["message"];
  }
  else if ( "shortMessage" in error ) {
    _message =
      error["shortMessage"];
  }
  _msg_error(
    _message,
    0);
}

function
  _input_data_check(
    _chunks_total) {
  if ( _chunks_total < 1 ) {
    _msg_error(
      "Upper chunk index lower than lower chunk index.",
      1);
  }
  _msg_info(
    "Input data checked.");
}

async function
  _chunk_index(
    _contract_run_opts) {
  let
    _tx;
  try {
    _tx = await
      _contract_run.apply(
        null,
        _contract_run_opts);
  } catch(e) {
    _msg_error(
      "Error indexing chunk.",
      0);
    throw e;
  }
  return _tx;
}

async function
  _index(
    _retries_max,
    _call_timeout,
    _wallet_seed_path,
    _api_key_path,
    _target_network,
    _contract_address,
    _contract_abi_path,
    _contract_bytecode_path,
    _contract_compiler_output_path,
    _publication_namespace,
    _file_hash,
    _index_start,
    _index_end,
    _chunk_chain_id,
    _chunk_fs_address,
    _checkpoint_file_path
  ) {
  let
    _checkpoint_index,
    _chunks_total,
    _index_call_base_opts,
    _index_call_opts,
    _method_args,
    _progress,
    _tx,
    _wallet_password;
  if ( _call_timeout == "" ) {
    _call_timeout =
      300000;
  }
  _call_timeout =
    Number(
      _call_timeout);
  _index_start =
    Number(_index_start);
  _index_end =
    Number(_index_end);
  _wallet_password =
    "";
  _index_call_base_opts = [
    _retries_max,
    _call_timeout,
    _wallet_seed_path,
    _wallet_password,
    _api_key_path,
    0,
    "ether",
    _target_network,
    _contract_address,
    _contract_abi_path,
    _contract_bytecode_path,
    _contract_compiler_output_path,
    "publishCrossChainChunk"
  ];
  _method_base_args = [
    _publication_namespace,
    _file_hash
  ];
  _chunks_total =
    _index_end - index_start + 1;
  _input_data_check(
    _chunks_total);
  _progress =
    1;
  for ( var _index = _index_start;
        _index <= _index_end;
        _index++ ) {
    _msg_info_chunk_index(
      _index,
      _progress,
      _chunks_total);
    // TODO:
    //   Check the pointer has not
    //   been already written.
    _method_args =
      _method_base_args.concat(
        [_index.toString(),
         _chunk_chain_id,
         _chunk_fs_address]);
    _index_call_opts =
      _index_call_base_opts.concat(
        [_method_args]);
    _tx = await
      _chunk_index(
        _index_call_opts);
    _msg_info_chunk_indexed(
      _index,
      _progress,
      _chunks_total);
    _checkpoint_index =
      _index.toString();
    _file_write(
      _checkpoint_file_path,
      _checkpoint_index);
    _progress =
      _progress + 1;
  }
  _msg_info(
    "All chunks correcly indexed.");
}

function
  _config_show() {
  let
    _line,
    _text;
  _text =
    [];
  _text.push(
    " Index configuration:"
  );
  _text.push(
    "          Maximum retries: {retries_max}".replace(
      "{retries_max}",
      retries_max));
  _text.push(
    "            Call timeout: {call_timeout}".replace(
      "{call_timeout}",
      call_timeout));
  _text.push(
    "              Wallet seed: {wallet_seed_path}".replace(
      "{wallet_seed_path}",
      wallet_seed_path));
  _text.push(
    "                  API Key: {api_key_path}".replace(
      "{api_key_path}",
      api_key_path));
  _text.push(
    "           Target network: {target_network}".replace(
      "{target_network}",
      target_network));
  _text.push(
    "         Contract address: {contract_address}".replace(
      "{contract_address}",
      contract_address));
  _text.push(
    "             Contract ABI: {contract_abi_path}".replace(
      "{contract_abi_path}",
      contract_abi_path));
  _text.push(
    "        Contract bytecode: {contract_bytecode_path}".replace(
      "{contract_bytecode_path}",
      contract_bytecode_path));
  _text.push(
    " Contract compiler output: {contract_compiler_output_path}".replace(
      "{contract_compiler_output_path}",
      contract_compiler_output_path));
  _text.push(
    "    Publication namespace: {publication_namespace}".replace(
      "{publication_namespace}",
      publication_namespace));
  _text.push(
    "                File hash: {file_hash}".replace(
      "{file_hash}",
      file_hash));
  _text.push(
    "              Index start: {index_start}".replace(
      "{index_start}",
      index_start));
  _text.push(
    "                Index end: {index_end}".replace(
      "{index_end}",
      index_end));
  _text.push(
    "           Chunk chain ID: {chunk_chain_id}".replace(
      "{chunk_chain_id}",
      chunk_chain_id));
  _text.push(
    "         Chunk FS address: {chunk_fs_address}".replace(
      "{chunk_fs_address}",
      chunk_fs_address));
  _text.push(
    "     Checkpoint file path: {checkpoint_file_path}".replace(
      "{checkpoint_file_path}",
      checkpoint_file_path));
  for ( _line in _text ) {
    _msg_info(
      _text[_line]);
  }
}

function
  _usage(
    _exit) {
  let
    _line,
    _text;
  _text = [
    "Index cross-chain chunks of an EVMFS file.",
    "",
    "Usage:",
    "  index",
    "    <quiet>",
    "    <retries_max>",
    "    <call_timeout>",
    "    <api_key_path>",
    "    <target_network>",
    "    <contract_address>",
    "    <contract_abi_path>",
    "    <contract_bytecode_path>",
    "    <contract_compiler_output_path>",
    "    <publication_namespace>",
    "    <index_start>",
    "    <file_hash>",
    "    <index_start>",
    "    <index_end>",
    "    <chunk_chain_id>",
    "    <chunk_fs_address>",
    "    <checkpoint_file_path>",
    "",
    "Args:",
    "  <quiet>                          Can be 'y' or 'n'",
    "                                   Default: y",
    "  <retries_max>                    Maximum number of retries before",
    "                                   failing.",
    "  <call_timeout>                   How many milliseconds to wait for a return",
    "                                   before declaring the call failed.",
    "  <api_key_path>                   Path of the API key for the",
    "                                   contract ABI provider service.",
    "  <target_network>                 Network on which the contract",
    "                                   resides.",
    "  <contract_address>               Address of the contract.",
    "  <contract_abi_path>              Contract ABI path.",
    "  <contract_bytecode_path>         Path for the contract bytecode.",
    "  <contract_compiler_output_path>  Path for the contract compiler",
    "                                   output path (the hardhat artifact).",
    "  <publication_namespace>          Namespace in which the file is being",
    "                                   published.",
    "  <file_hash>                      Hash of the file to publish.",
    "  <index_start>                    Chunk index from where to start.",
    "  <index_end>                      Final chunk index to index.",
    "  <chunk_chain_id>                 Chain ID of the network on which",
    "                                   the chunk has been published.",
    "  <chunk_fs_address>               File system address on which",
    "                                   the chunk has been published.",
    "  <checkpoint_file_path>           Checkpoint file on which latest",
    "                                   downloaded chunk index is saved",
    "                                   in case node was to crash.",
  ];
  for ( _line of _text ) {
    _msg_info(
      _line);
  }
  process.exit(
    _exit);
}


function
  _cmdline_parse() {
  quiet =
    "y";
  process.argv.forEach(
    function (
      _value,
      _index,
      _array) {
      if ( _index == 2 ) {
        quiet =
          _value;
      }
      if ( _index == 3 ) {
        retries_max =
          _value;
      }
      if ( _index == 4 ) {
        call_timeout =
          _value;
      }
      if ( _index == 5 ) {
        wallet_seed_path =
          _value;
      }
      if ( _index == 6 ) {
        api_key_path =
          _value;
      }
      if ( _index == 7 ) {
        target_network =
          _value;
      }
      if ( _index == 8 ) {
        contract_address =
          _value;
      }
      if ( _index == 9 ) {
        contract_abi_path =
          _value;
      }
      if ( _index == 10 ) {
        contract_bytecode_path =
          _value;
      }
      if ( _index == 11 ) {
        contract_compiler_output_path =
          _value;
      }
      if ( _index == 12 ) {
        publication_namespace =
          _value;
      }
      if ( _index == 13 ) {
        file_hash =
          _value;
      }
      if ( _index == 14 ) {
        index_start =
          _value;
      }
      if ( _index == 15 ) {
        index_end =
          _value;
      }
      if ( _index == 16 ) {
        chunk_chain_id =
          _value;
      }
      if ( _index == 17 ) {
        chunk_fs_address =
          _value;
      }
      if ( _index == 18 ) {
        checkpoint_file_path =
          _value;
      }
      if ( _value == "-h" ||
           _value == "--help" ) {
        quiet =
          "n";
        _usage(
          0);
      }
  });
  if ( file_hash == "" ||
       publication_namespace == "" ) {
    quiet =
      "n";
    _usage(
      1);
  }
}

function
  _overrides_set() {
  if ( call_timeout == "" ) {
    call_timeout =
      300000;
  }
}

if ( _cmdline_check(
       "index") == true ) {
  _global_variables();
  _cmdline_parse();
  _overrides_set();
  _config_show();
  app_opts = [
    retries_max,
    call_timeout,
    wallet_seed_path,
    api_key_path,
    target_network,
    contract_address,
    contract_abi_path,
    contract_bytecode_path,
    contract_compiler_output_path,
    publication_namespace,
    file_hash,
    index_start,
    index_end,
    chunk_chain_id,
    chunk_fs_address,
    checkpoint_file_path
  ];
  _index.apply(
    null,
    app_opts);
}

module.exports = {
  _index:
    _index,
};
