#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  call_date=""
  target_command=""
  fs_address=""
  fs_version=""
  deployments_dir=""
  user_level=""
  wallet_name=""
  wallet_path=""
  wallet_password=""
  wallet_seed=""
  wallet_address=""
  target_network=""
  api_key=""
  wallet_name=""
  target_key=""
  target_value=""
  upload_method=""
  output_file=""
  cache_dir=""
  command_args=()
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    'evmfs-get' \
    'evmfs'
  _check_cmd \
    'evmfs-publish' \
    'evmfs'
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/$( \
    _get \
      "app" \
      "name")"
  echo \
    "${_dir}"
}

_cache_dir_auto_detect() {
  local \
    _dir
  _dir="${HOME}/.cache/evmfs"
  echo \
    "${_dir}"
}

_evmfs() {
  local \
    _target_command="${1}" \
    _fs_address="${2}" \
    _fs_version="${3}" \
    _deployments_dir="${4}" \
    _wallet_name="${5}" \
    _wallet_path="${6}" \
    _wallet_password="${7}" \
    _wallet_seed="${8}" \
    _network="${9}" \
    _api_key_path="${10}" \
    _upload_method="${11}" \
    _cache_dir="${12}" \
    _user_level="${13}" \
    _output_file="${14}" \
    _target_key="${15}" \
    _target_value="${16}" \
    _target_uri \
    _target_file \
    _command_args=() \
    _args=()
  shift \
    16
  _command_args+=(
    "$@"
  )
  if [[ "${quiet}" != "y" ]]; then
    _args+=(
      -v
    )
  fi
  _args+=(
    -A
      "${_fs_address}"
    -V
      "${_fs_version}"
    -d
      "${_deployments_dir}"
    -N
      "${_wallet_name}"
    -w
      "${_wallet_path}"
    -p
      "${_wallet_password}"
    -s
      "${_wallet_seed}"
    -n
      "${_network}"
    -k
      "${_api_key_path}"
    -C
      "${_cache_dir}"
  )
  if [[ "${_user_level}" == "y" ]]; then
    _args+=(
      -u
    )
  fi
  if [[ "${_target_command}" == "get" ]]; then
    if [[ "${_output_file}" != "" ]]; then
      _args+=(
        -o
          "${_output_file}"
      )
    fi
    _target_uri="${_target_key}"
    _args+=(
      "${_target_uri}"
    )
  elif [[ "${_target_command}" == "publish" ]]; then
    _target_file="${_target_key}"
    _args+=(
      -m
        "${_upload_method}"
      "${_target_file}"
    )
  else
    _msg=(
      "command '${_target_command}' not known"
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  "evmfs-${_target_command}" \
    "${_args[@]}"
}

_wallet_path_get() {
  local \
    _path \
    _name
  _name="$( \
    _get \
      "wallet" \
      "name")"
  _path="$( \
    _get_conf_dir_path)/${_name}.dat"
  echo \
    "${_path}"
}

_secret_get() {
  local \
    _secret="${1}" \
    _path \
    _name
  _name="$( \
    _get \
      "wallet" \
      "name")"
  _path="${HOME}/.config/evm-wallet/${_name}-${_secret}.txt"
  echo \
    "${_path}"
}

_api_key_auto_detect() {
  local \
    _chain="${1}" \
    _chain_name \
    _key \
    _msg=()
  _key="$( \
    evm-chains-explorers \
      -c \
        "${_chain}" \
      -s \
        'kirsh' \
      get \
        keys)"
  _chain_name="$( \
    evm-chains-info \
      -o \
        "name" \
      "${_chain}")"
  if [[ ! -e "${_key}" ]]; then
    _msg=(
      "Found no provider services"
      "keys for chain '${_chain_name}'."
      "Check available service"
      "providers with \"evm-chains-info"
      "-o explorers '${_chain}'\""
      "and add the relative api key in"
      "'<user_home>/.config/evm-chains-explorers/<service>/default.txt'"
    )
    _msg_info \
      "${_msg[*]}"
  fi
  _set_override \
    "api" \
    "key" \
    "${_key}"
}

_secret_auto_detect() {
  local \
    _secret="${1}" \
    _secret_type="${2}" \
    _dir \
    _key_gen_opts=() \
    _msg=()
  _path="$( \
    _secret_get \
      "${_secret}")"
  _dir="$( \
    dirname \
      "${_path}")"
  if [[ ! -e "${_path}" ]]; then
    _key_gen_opts+=(
      -t
        "${_secret_type}"
    )
    _msg=(
      "generating ${_secret} '${_path}'"
    )
    if [[ "${quiet}" == "n" ]]; then
      _msg_info \
        "${_msg[*]}"
    fi
    mkdir \
      -p \
      "${_dir}"
    chmod \
      700 \
      "${_dir}"
    chmod \
      700 \
      "${_dir}"
    key-gen \
      "${_key_gen_opts[@]}" \
      "${_path}"
    chmod \
      400 \
      "${_path}"
    _msg=(
      "${_secret} '${_path}' successfully generated"
    )
    if [[ "${quiet}" == "n" ]]; then
      _msg_info \
        "${_msg[*]}"
    fi
  fi
  _set_override \
    "wallet" \
    "${_secret}" \
    "${_path}"
}

_deployments_dir_auto_detect() {
  local \
    _user_level \
    _evm_contract_deployments_dir_opts=() \
    _deployments_dir \
    _system_deployments
  _user_level="$( \
    _get \
      "user" \
      "level")"
  if [[ "${_user_level}" == "y" ]]; then
    _evm_contract_deployments_dir_opts+=(
      -u
    )
  fi
  _deployments_dir="$( \
    evm-contract-deployments-dir \
      "${_evm_contract_deployments_dir_opts[@]}" \
      "evmfs")"
  if [[ ! -d "${_deployments_dir}" ]]; then
    _system_deployments="$( \
     evm-contract-deployments-dir \
       "evmfs")"
    _msg=(
      "user deployments directory"
      "'${_deployments_dir}' does"
      "not exists, importing system deployments"
      "directory '${_system_deployments}'"
    )
    _msg_info \
      "${_msg[*]}"
    mkdir \
      -p \
      "${_deployments_dir}"
    chmod \
      700 \
      "${_deployments_dir}"
    cp \
     -r \
     "${_system_deployments}/"* \
     "${_deployments_dir}"
  fi
  _set_override \
    "deployments" \
    "dir" \
    "${_deployments_dir}"
}

_network_auto_detect() {
  local \
    _contract \
    _contract_deployment \
    _deployments \
    _user \
    _msg=()
  _contract="FileSystem"
  _deployments="$( \
    _get \
      "deployments" \
      "dir")"
  _contract_deployment="${_deployments}/${_contract}"
  _user="$( \
    _get \
      "user" \
      "level")"
  if [[ "${_user}" == "y" ]]; then
    _msg=(
     "User deployments enabled, looking"
     "for cheapest network deployments at" 
     "path '${_contract_deployment}'"
   )
   _msg_info \
     "${_msg[*]}"
  fi
  _network="$( \
    evm-contract-deployment-networks \
      -C \
      "${_contract_deployment}")"
  if [[ "${_user}" == "y" ]]; then
    _msg=(
      "Found network '${_network}'"
    )
    _msg_info \
      "${_msg[*]}"
  fi
  _set_override \
    "target" \
    "network" \
    "${_network}"
}

_fs_version_auto_detect() {
  local \
    _config \
    _deployments \
    _network \
    _version
  _deployments="$( \
    _get \
      "deployments" \
      "dir")"
  _network="$( \
    _get \
      "target" \
      "network")"
  _config="${_deployments}/FileSystem/${_network}/config.sh"
  _version="$( \
    evm-contract-deployment-versions \
      -H \
      "${_config}")"
  _set_override \
    "fs" \
    "version" \
    "${_version}"
}

_fs_address_auto_detect() {
  local \
    _address \
    _network \
    _deployments \
    _user \
    _version \
    _evm_contract_deployment_address_opts=() \
    _msg=()
  _network="$( \
    _get \
      "target" \
      "network")"
  _evm_contract_deployment_address_opts+=(
    -n
      "${_network}"
  )
  _version="$( \
    _get \
      "fs" \
      "version")"
  if [[ "${_version}" != "" ]]; then
    _evm_contract_deployment_address_opts+=(
      -V
        "${_version}"
    )
  fi
  _user="$( \
    _get \
      "user" \
      "level")"
  if [[ "${_user}" == "n" ]]; then
    _evm_contract_deployment_address_opts+=(
      -a
        "evmfs"
    )
  elif [[ "${_user}" == "y" ]]; then
    _deployments="$( \
      _get \
        "deployments" \
        "dir")"
    _evm_contract_deployment_address_opts+=(
      -u
      -d
        "${_deployments}" 
    )
  fi
  _address="$( \
    evm-contract-deployment-address \
      "${_evm_contract_deployment_address_opts[@]}" \
      "FileSystem")"
  if [[ "${_address}" == "" ]]; then
    _msg=(
      "error getting FileSystem version"
      "${_version} deployment address"
      "for network '${_network}'"
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  _set_override \
    "fs" \
    "address" \
    "${_address}"
}

_address_section_get() {
  local \
    _uri="${1}" \
    _position="${2}" \
    _path \
    _reversed \
    _hash_reversed
  _path="${_uri#evmfs://}"
  _reversed="$( \
    echo \
      "${_uri}" |
      rev)"
  _section="$( \
    echo \
      "${_reversed}" | \
      cut \
        -d \
          "/" \
        -f \
          "${_position}")"
  echo \
    "${_section}" | \
    rev
}

_hash_get() {
  local \
    _uri="${1}"
  _address_section_get \
    "${_uri}" \
    "1"
}

_output_file_auto_detect() {
  local \
    _target_command \
    _output_file \
    _target_uri
  _target_command="$( \
    _get \
      "target" \
      "command")"
  _output_file=""
  if [[ "${_target_command}" == "get" ]]; then
    _target_uri="$( \
      _get \
        "target" \
        "key")"
    _output_file="$( \
      pwd)/$( \
        _hash_get \
          "${_target_uri}")"
  fi
  _set_override \
    "output" \
    "file" \
    "${_output_file}"
}

_set_overrides() {
  local \
    _output_file \
    _target_uri
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "call" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "wallet" \
    "name" \
    "default"
  _set_override \
    "user" \
    "level" \
    "n"
  _deployments_dir_auto_detect
  _network_auto_detect
  _api_key_auto_detect \
    "$(_get \
         "target" \
         "network")"
  _set_override \
    "target" \
    "command" \
    "get"
  _set_override \
    "wallet" \
    "path" \
    "$(_wallet_path_get)"
  _secret_auto_detect \
    "seed" \
    "seed"
  _secret_auto_detect \
    "password" \
    "plain"
  _set_override \
    "wallet" \
    "address" \
    "$(evm-wallet \
         get \
           "${wallet_name}" \
           "address")"
  _set_override \
    "cache" \
    "dir" \
    "$(_cache_dir_auto_detect)"
  _set_override \
    "upload" \
    "method" \
    "standalone"
  _output_file_auto_detect
  _fs_version_auto_detect
  _fs_address_auto_detect
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _fs_deployment \
    _networks \
    _usage_text
  _fs_deployment="$( \
    _get \
      "deployments" \
      "dir")/FileSystem"
  _networks=( $( \
    evm-contract-deployment-networks \
      -A \
      "${_fs_deployment}")
  )
  _msg_info \
    "ciao ${_networks[*]}"
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Ethereum Virtual Machine File System

Usage:
  $(_get "app" "name")
    [options]
    <command>
      (<command_args>)

  commands:
    get
      <resource_uri>
    publish
      <file_path>

  networks:
$(_display_networks \
     "${_networks[@]}")

  options:
     -A <fs_address>        Address of the EVM file system
                            on the network.
                            Default: $(_get "fs" "address")
     -V <fs_version>        Version of the target EVM file
                            system.
                            Default: $(_get "fs" "version")
     -o <output_file>       Name of the file in which to save
                            the downloaded resource.
                            Default: $(_get "output" "file")
     -u                     Whether to retrieve file system
                            address from user directory or custom
                            deployment.
                            Default: $(_get "user" "level")
     -d <deployments_dir>   Contracts deployments directory.
                            Default: $(_get "deployments" "dir")
     -N <wallet_name>       Wallet name.
                            Default: $(_get "wallet" "name")
     -w <wallet_path>       Wallet path.
                            Default: $(_get "wallet" "path")
     -p <wallet_password>   Wallet password.
                            Default: $(_get "wallet" "password")
     -s <wallet_seed>       Wallet seed path.
                            Default: $(_get "wallet" "seed")
     -n <network>           EVM network name. Use either name
                            or ID.
                            Default: $(_get "target" "network")
     -k <api_key>           Etherscan-like service key.
                            Default: $(_get "api" "key")
     -m <upload_method>     It can be 'standalone', 'bulk' or
                            'simulate'
                            Default: $(_get "upload" "method")
     -C <cache_dir>         Work directory
                            Default: $(_get "cache" "dir")

     -h                     This message.
     -c                     Enable color output
     -v                     Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

_display_networks() {
  local \
    _networks=() \
    _network \
    _network_name
  _networks=(
      "$@"
    )
  for _network \
    in "${_networks[@]}"; do
    _network_name="$( \
      evm-chains-info \
        -i \
          "id" \
        -o \
          "name" \
        "${_network}")"
  echo \
    "    '${_network_name}' (${_network})"
  done
}

# Shows configuration options.
_show_config() {
  TZ=UTC \
  _msg_info "${app_name} configuration"
  _msg_info "                Call date:   $(_get "call" "date")"
  _msg_info "      File system address:   $(_get "fs" "address")"
  _msg_info "      File system version:   $(_get "fs" "version")"
  _msg_info "               User level:   $(_get "user" "level")"
  _msg_info "    Deployments directory:   $(_get "deployments" "dir")"
  _msg_info "              Wallet path:   $(_get "wallet" "path")"
  _msg_info "          Wallet password:   $(_get "wallet" "password")"
  _msg_info "              Wallet seed:   $(_get "wallet" "seed")"
  _msg_info "           Target network:   $(_get "target" "network")"
  _msg_info "                  API key:   $(_get "api" "key")"
  _msg_info "            Upload method:   $(_get "upload" "method")"
  _msg_info "          Cache directory:   $(_get "cache" "dir")"
  _msg_info "              Output file:   $(_get "output" "file")"
  _msg_info "           Target command:   $(_get "target" "command")"
  _msg_info "               Target key:   $(_get "target" "key")"
  _msg_info "             Target value:   $(_get "target" "value")"
}

_globals
_global_variables
_requirements
_config_user_init \
  "$(_get \
       "app" \
       "name")"
# shellcheck disable=SC2034
while \
  getopts \
    'A:V:o:ud:N:w:p:s:n:k:m:C:cvh?' \
    arg; do
  case \
    "${arg}" in
    A) override_fs_address="${OPTARG}" ;;
    V) override_fs_version="${OPTARG}" ;;
    o) override_output_file="${OPTARG}" ;;
    u) override_user_level="y" ;;
    d) override_deployments_dir="${OPTARG}" ;;
    N) override_wallet_name="${OPTARG}" ;;
    w) override_wallet_path="${OPTARG}" ;;
    p) override_wallet_password="${OPTARG}" ;;
    s) override_wallet_seed="${OPTARG}" ;;
    n) override_target_network="${OPTARG}" ;;
    k) override_api_key="${OPTARG}" ;;
    m) override_upload_method="${OPTARG}" ;;
    C) override_cache_dir="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( $# < 1 )); then
  _msg_error \
    "no command given" \
    0
  _set_overrides
  _usage \
    1
fi
if (( $# < 2 )); then
  _msg_error \
    "no value given" \
    0
  _set_overrides
  _usage \
    1
fi
if (( 0 < $# )); then
  _set \
    "target" \
    "command" \
    "${1}"
fi
if (( 1 < $# )); then
  _set \
    "target" \
    "key" \
    "${2}"
fi
if (( 2 < $# )); then
  _set \
    "target" \
    "value" \
    "${3}"
fi
shift \
  3 || \
  true
command_args+=(
  "$@"
)
_set_overrides
_config_user_init \
  "$( \
    _get \
      "app" \
      "name")"
_show_config
app_opts=(
  "$(_get \
      "target" \
      "command")"
  "$(_get \
       "fs" \
       "address")"
  "$(_get \
       "fs" \
       "version")"
  "$(_get \
       "deployments" \
       "dir")"
  "$(_get \
       "wallet" \
       "name")"
  "$(_get \
      "wallet" \
      "path")"
  "$(_get \
      "wallet" \
      "password")"
  "$(_get \
      "wallet" \
      "seed")"
  "$(_get \
      "target" \
      "network")"
  "$(_get \
      "api" \
      "key")"
  "$(_get \
       "upload" \
       "method")"
  "$(_get \
       "cache" \
       "dir")"
  "$(_get \
       "user" \
       "level")"
  "$(_get \
       "output" \
       "file")"
  "$( \
    _get \
      "target" \
      "key")"
  "$( \
    _get \
      "target" \
      "value")"
)
_evmfs \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
