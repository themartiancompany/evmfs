#!/usr/bin/env bash

# SPDX-License-Identifier: AGPL-3.0-or-later

#    ----------------------------------------------------------------------
#    Copyright Â© 2024, 2025  Pellegrino Prevete
#
#    All rights reserved
#    ----------------------------------------------------------------------
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"
source \
  "${_lib}/libevm/libevm"

# shellcheck disable=SC2034
_global_variables() {
  call_date=""
  target_command=""
  fs_address=""
  fs_version=""
  deployments_dir=""
  user_level=""
  wallet_name=""
  wallet_path=""
  wallet_password=""
  wallet_seed=""
  wallet_address=""
  target_network=""
  api_key=""
  wallet_name=""
  target_key=""
  target_value=""
  call_method=""
  lock_only=""
  output_file=""
  tasks_parallel=""
  cache_dir=""
  command_args=()
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    'libevm-requirements' \
    'libevm'
  libevm-requirements
  _check_cmd \
    'evm-contract-call' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-contract-deployment-networks' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-wallet'
  _check_cmd \
    'evmfs-get' \
    'evmfs'
  _check_cmd \
    'evmfs-publish' \
    'evmfs'
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/$( \
    _get \
      "app" \
      "name")"
  echo \
    "${_dir}"
}

_cache_dir_auto_detect() {
  local \
    _dir
  _dir="${HOME}/.cache/evmfs"
  echo \
    "${_dir}"
}

_evmfs() {
  local \
    _target_command="${1}" \
    _fs_address="${2}" \
    _fs_version="${3}" \
    _deployments_dir="${4}" \
    _wallet_name="${5}" \
    _wallet_path="${6}" \
    _wallet_password="${7}" \
    _wallet_seed="${8}" \
    _network="${9}" \
    _api_key_path="${10}" \
    _call_method="${11}" \
    _lock_only="${12}" \
    _tasks_parallel="${13}" \
    _cache_dir="${14}" \
    _user_level="${15}" \
    _output_file="${16}" \
    _target_key="${17}" \
    _target_value="${18}" \
    _target_uri \
    _target_file \
    _command_args=() \
    _args=()
  shift \
    18
  _command_args+=(
    "$@"
  )
  if [[ "${quiet}" != "y" ]]; then
    _args+=(
      -v
    )
  fi
  _args+=(
    -A
      "${_fs_address}"
    -V
      "${_fs_version}"
    -d
      "${_deployments_dir}"
    -N
      "${_wallet_name}"
    -w
      "${_wallet_path}"
    -p
      "${_wallet_password}"
    -s
      "${_wallet_seed}"
    -n
      "${_network}"
    -k
      "${_api_key_path}"
    -P
      "${_tasks_parallel}"
    -C
      "${_cache_dir}"
  )
  if [[ "${_user_level}" == "y" ]]; then
    _args+=(
      -u
    )
  fi
  if [[ "${_target_command}" == "get" ]]; then
    if [[ "${_output_file}" != "" ]]; then
      _args+=(
        -o
          "${_output_file}"
      )
    fi
    _target_uri="${_target_key}"
    _args+=(
      "${_target_uri}"
    )
  elif [[ "${_target_command}" == "publish" ]]; then
    if [[ "${_lock_only}" == "y" ]]; then
      _args+=(
        -L
      )
    fi
    _target_file="${_target_key}"
    _args+=(
      -m
        "${_call_method}"
      "${_target_file}"
    )
  else
    _msg=(
      "command '${_target_command}' not known"
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  "evmfs-${_target_command}" \
    "${_args[@]}"
  return \
    0
}

_address_section_get() {
  local \
    _uri="${1}" \
    _position="${2}" \
    _path \
    _reversed \
    _hash_reversed
  _path="${_uri#evmfs://}"
  _reversed="$( \
    echo \
      "${_uri}" |
      rev)"
  _section="$( \
    echo \
      "${_reversed}" | \
      cut \
        -d \
          "/" \
        -f \
          "${_position}")"
  echo \
    "${_section}" | \
    rev
}

_hash_get() {
  local \
    _uri="${1}"
  _address_section_get \
    "${_uri}" \
    "1"
}

_output_file_auto_detect() {
  local \
    _target_command \
    _output_file \
    _target_uri
  _target_command="$( \
    _get \
      "target" \
      "command")"
  _output_file=""
  if [[ "${_target_command}" == "get" ]]; then
    _target_uri="$( \
      _get \
        "target" \
        "key")"
    _output_file="$( \
      pwd)/$( \
        _hash_get \
          "${_target_uri}")"
  fi
  _set_override \
    "output" \
    "file" \
    "${_output_file}"
}

_call_method_auto_detect() {
  local \
    _target_command \
    _call_method
  _target_command="$( \
    _get \
      "target" \
      "command")"
  if [[ "${_target_command}" == "get" ]]; then
    _call_method="bulk"
  elif [[ "${_target_command}" == "publish" ]]; then
    _call_method="standalone"
  else
    _call_method="standalone"
  fi
  _set_override \
    "call" \
    "method" \
    "${_call_method}"
}

_tasks_parallel_auto_detect() {
  local \
    _call_method \
    _tasks_parallel
  _call_method="$( \
    _get \
      "call" \
      "method")"
  if [[ "${_call_method}" == "standalone" ]]; then
    _tasks_parallel=200
  elif [[ "${_call_method}" == "bulk" ]]; then
    _tasks_parallel=1
  else
    _tasks_parallel=1
  fi
  _set_override \
    "tasks" \
    "parallel" \
    "${_tasks_parallel}"
}

_set_overrides() {
  local \
    _output_file \
    _target_uri
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "call" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "target" \
    "command" \
    "get"
  _set_override \
    "wallet" \
    "name" \
    "default"
  _set_override \
    "user" \
    "level" \
    "n"
  _deployments_dir_auto_detect \
    "evmfs" \
    "${user_level}"
  _network_auto_detect \
    "FileSystem" \
    "${deployments_dir}" \
    "${user_level}"
  _api_key_auto_detect \
    "${target_network}"
  _set_override \
    "wallet" \
    "path" \
    "$(_wallet_path_get \
         "evm-wallet" \
         "${wallet_name}")"
  _secret_auto_detect \
    "seed" \
    "seed" \
    "evm-wallet" \
    "${wallet_name}"
  _secret_auto_detect \
    "password" \
    "plain" \
    "evm-wallet" \
    "${wallet_name}"
  _set_override \
    "wallet" \
    "address" \
    "$(evm-wallet \
         get \
           "${wallet_name}" \
           "address")"
  _set_override \
    "cache" \
    "dir" \
    "$(_cache_dir_auto_detect)"
  _call_method_auto_detect
  _tasks_parallel_auto_detect
  _set_override \
    "lock" \
    "only" \
    "n"
  _output_file_auto_detect
  _contract_version_auto_detect \
    "${deployments_dir}" \
    "FileSystem" \
    "fs" \
    "${target_network}"
  _contract_address_auto_detect \
    "evmfs" \
    "FileSystem" \
    "fs" \
    "${target_network}" \
    "${fs_version}" \
    "${user_level}" \
    "${deployments_dir}"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _fs_deployment \
    _networks \
    _usage_text
  _fs_deployment="$( \
    _get \
      "deployments" \
      "dir")/FileSystem"
  _networks=( $( \
    evm-contract-deployment-networks \
      -A \
      "${_fs_deployment}")
  )
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Ethereum Virtual Machine File System

Usage:
  $(_get "app" "name")
    [options]
    <command>
      (<command_args>)

  commands:
    get
      <resource_uri>
    publish
      <file_path>

  networks:
$(_display_networks \
     "${_networks[@]}")

  options:
     -A <fs_address>        Address of the EVM file system
                            on the network.
                            Default: ${fs_address}
     -V <fs_version>        Version of the target EVM file
                            system.
                            Default: ${fs_version}
     -o <output_file>       Name of the file in which to save
                            the downloaded resource.
                            Default: ${output_file}
     -u                     Whether to retrieve file system
                            address from user directory or custom
                            deployment.
                            Default: ${user_level}
     -d <deployments_dir>   Contracts deployments directory.
                            Default: ${deployments_dir}
     -N <wallet_name>       Wallet name.
                            Default: ${wallet_name}
     -w <wallet_path>       Wallet path.
                            Default: ${wallet_path}
     -p <wallet_password>   Wallet password.
                            Default: ${wallet_password}
     -s <wallet_seed>       Wallet seed path.
                            Default: ${wallet_seed}
     -n <network>           EVM network name. Use either name
                            or ID.
                            Default: ${target_network}
     -k <api_key>           Etherscan-like service key.
                            Default: ${api_key}
     -m <call_method>       It can be 'standalone', 'bulk' or
                            'simulate'
                            Default: ${call_method}
     -L                     Skip check and publish and only lock
                            the file.
                            Default: ${lock_only}
     -P <tasks_paralell>    How many calls tasks perform at any
                            given time
                            Default: ${tasks_parallel}
     -C <cache_dir>         Work directory
                            Default: ${cache_dir}

     -h                     This message.
     -c                     Enable color output
     -v                     Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  TZ=UTC \
  _msg_info "${app_name} configuration"
  _msg_info "                Call date:   ${call_date}"
  _msg_info "      File system address:   ${fs_address}"
  _msg_info "      File system version:   ${fs_version}"
  _msg_info "               User level:   ${user_level}"
  _msg_info "    Deployments directory:   ${deployments_dir}"
  _msg_info "              Wallet name:   ${wallet_name}"
  _msg_info "              Wallet path:   ${wallet_path}"
  _msg_info "          Wallet password:   ${wallet_password}"
  _msg_info "              Wallet seed:   ${wallet_seed}"
  _msg_info "           Target network:   ${target_network}"
  _msg_info "                  API key:   ${api_key}"
  _msg_info "          Cache directory:   ${cache_dir}"
  _msg_info "              Call method:   ${call_method}"
  _msg_info "                Lock only:   ${lock_only}"
  _msg_info "           Parallel tasks:   ${tasks_parallel}"
  _msg_info "              Output file:   ${output_file}"
  _msg_info "           Target command:   ${target_command}"
  _msg_info "               Target key:   ${target_key}"
  _msg_info "             Target value:   ${target_value}"
}

_globals
_global_variables
_requirements
_config_user_init \
  "$(_get \
       "app" \
       "name")"
# shellcheck disable=SC2034
while \
  getopts \
    'A:V:o:ud:N:w:p:s:n:k:m:LP:C:cvh?' \
    arg; do
  case \
    "${arg}" in
    A) override_fs_address="${OPTARG}" ;;
    V) override_fs_version="${OPTARG}" ;;
    o) override_output_file="${OPTARG}" ;;
    u) override_user_level="y" ;;
    d) override_deployments_dir="${OPTARG}" ;;
    N) override_wallet_name="${OPTARG}" ;;
    w) override_wallet_path="${OPTARG}" ;;
    p) override_wallet_password="${OPTARG}" ;;
    s) override_wallet_seed="${OPTARG}" ;;
    n) override_target_network="${OPTARG}" ;;
    k) override_api_key="${OPTARG}" ;;
    m) override_call_method="${OPTARG}" ;;
    L) override_lock_only="y" ;;
    P) override_tasks_parallel="${OPTARG}" ;;
    C) override_cache_dir="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( $# < 1 )); then
  _msg_error \
    "no command given" \
    0
  _set_overrides
  _usage \
    1
fi
if (( $# < 2 )); then
  _msg_error \
    "no value given" \
    0
  _set_overrides
  _usage \
    1
fi
if (( 0 < $# )); then
  _set \
    "target" \
    "command" \
    "${1}"
fi
if (( 1 < $# )); then
  _set \
    "target" \
    "key" \
    "${2}"
fi
if (( 2 < $# )); then
  _set \
    "target" \
    "value" \
    "${3}"
fi
shift \
  3 || \
  true
command_args+=(
  "$@"
)
_set_overrides
_config_user_init \
  "$( \
    _get \
      "app" \
      "name")"
_show_config
app_opts=(
  "${target_command}"
  "${fs_address}"
  "${fs_version}"
  "${deployments_dir}"
  "${wallet_name}"
  "${wallet_path}"
  "${wallet_password}"
  "${wallet_seed}"
  "${target_network}"
  "${api_key}"
  "${call_method}"
  "${lock_only}"
  "${tasks_parallel}"
  "${cache_dir}"
  "${user_level}"
  "${output_file}"
  "${target_key}"
  "${target_value}"
)
_evmfs \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
