#!/usr/bin/env node

// SPDX-License-Identifier: AGPL-3.0-or-later

//    lengthlock
//    ----------------------------------------------------------------------
//    Copyright Â© 2024, 2025  Pellegrino Prevete
//
//    All rights reserved
//    ----------------------------------------------------------------------
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as published
//    by the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <https://www.gnu.org/licenses/>.

const
  _libcrash =
    require(
      '../libcrash-js/crash-js');
_cmdline_check =
  _libcrash._cmdline_check;
_error_display =
  _libcrash._error_display;
_file_write =
  _libcrash._file_write;
_msg_info =
  _libcrash._msg_info;
_msg_error =
  _libcrash._msg_error;
const
  _evm_contract_call =
  require(
    '../evm-contracts-tools/evm-contract-call-static');
_contract_call_static =
  _evm_contract_call._contract_call_static

function
  _global_variables() {
  app_name =
    "lengthlock";
  retries_max =
    '';
  api_key_path =
    "";
  target_network =
    "";
  contract_address =
    "";
  contract_abi_path =
    "";
  contract_bytecode_path =
    "";
  contract_compiler_output_path =
    "";
  method_object =
    "";
  publication_namespace =
    "";
  file_hash =
    "";
  index_start =
    "";
  index_end =
    "";
  checkpoint_file_path =
    "";
  chunks_files_paths =
    [];
  quiet =
    "";
}

function
  _msg_info_length_get(
    _hash,
    _progress,
    _total) {
  let
    _msg,
    _template;
  _template =
    "Getting length for hash '{_hash}' " +
    "('{_progress}'of '{_total}').";
  _msg =
    _template.replaceAll(
      "{_hash}",
      _hash);
  _msg =
    _msg.replaceAll(
      "{_progress}",
      _progress);
  _msg =
    _msg.replaceAll(
      "{_total}",
      _total);
  _msg_info(
    _msg);
}

function
  _msg_info_length_got(
    _hash,
    _progress,
    _total) {
  let
    _msg,
    _template;
  _template =
    "Got length for hash '{_hash}' " +
    "('{_progress}'of '{_total}').";
  _msg =
    _template.replaceAll(
      "{_hash}",
      _hash);
  _msg =
    _msg.replaceAll(
      "{_progress}",
      _progress);
  _msg =
    _msg.replaceAll(
      "{_total}",
      _total);
  _msg_info(
    _msg);
}

function
  _msg_info_lock_get(
    _hash,
    _progress,
    _total) {
  let
    _msg,
    _template;
  _template =
    "Getting lock status for hash '{_hash}' " +
    "('{_progress}'of '{_total}').";
  _msg =
    _template.replaceAll(
      "{_hash}",
      _hash);
  _msg =
    _msg.replaceAll(
      "{_progress}",
      _progress);
  _msg =
    _msg.replaceAll(
      "{_total}",
      _total);
  _msg_info(
    _msg);
}

function
  _msg_info_lock_got(
    _hash,
    _progress,
    _total) {
  let
    _msg,
    _template;
  _template =
    "Got lock status for hash '{_hash}' " +
    "('{_progress}'of '{_total}').";
  _msg =
    _template.replaceAll(
      "{_hash}",
      _hash);
  _msg =
    _msg.replaceAll(
      "{_progress}",
      _progress);
  _msg =
    _msg.replaceAll(
      "{_total}",
      _total);
  _msg_info(
    _msg);
}

async function
  _lock_get(
    _lock_call_opts) {
  let
    _method_object,
    _passed,
    _retry,
    _value;
  try {
    [ _value,
      _method_object ] =
      await _contract_call_static.apply(
        null,
        _lock_call_opts);
  } catch (
      _error) {
    _error_display(
      _error);
    _msg_error(
      "Error retrieving lock status.",
      0);
    throw _error;
  }
  return [
    _value,
    _method_object];
}

async function
  _length_get(
    _length_call_opts) {
  let
    _method_object,
    _passed,
    _retry,
    _value;
  try {
    [ _value,
      _method_object ] =
      await _contract_call_static.apply(
        null,
        _length_call_opts);
  } catch (
      _error) {
    _error_display(
      _error);
    _msg_error(
      "Error retrieving length.",
      0);
    throw _error;
  }
  return [
    _value,
    _method_object];
}

function
  _lock_input_data_check(
    _file_hashes,
    _file_hashes_total,
    _files_locks_paths_total) {
  let
    _sha256sum_length,
    _hash;
  if ( _files_hashes_total == 0 ) {
    _msg_error(
      "File hashes list empty.",
      1);
  }
  _sha256sum_length =
    64;
  for ( _hash of _file_hashes ) {
    if ( _hash.length != sha256sum_length ) {
      _msg =
        "Malformed SHA256 sum."
      _msg_error(
        _msg,
        1);
    }
  }
  if ( _files_locks_paths_total > 0 ) {
    if ( _files_locks_paths_total != 
         _files_hashes_total ) {
      _msg =
        "Amount of input files hashes different " +
        "from amount of input lock files paths."
      _msg_error(
        _msg);
    }
  }
}

function
  _length_input_data_check(
    _file_hashes,
    _file_hashes_total,
    _files_locks_paths_total,
    _files_lengths_paths_total) {
  let
    _sha256sum_length,
    _hash;
  _lock_input_data_check(
    _files_hashes,
    _files_hashes_total,
    _files_locks_paths_total);
  if ( _files_lengths_paths_total > 0 ) {
    if ( _files_lengths_paths_total != 
         _files_hashes_total ) {
      _msg =
        "Amount of input files hashes different " +
        "from amount of input length files paths."
      _msg_error(
        _msg);
    }
  }
}

async function
  _length_locked(
    _retries_max,
    _api_key_path,
    _target_network,
    _contract_address,
    _contract_abi_path,
    _contract_bytecode_path,
    _contract_compiler_output_path,
    _method_object,
    _publication_namespace,
    _files_hashes,
    _checkpoint_file_path,
    _files_locks_paths
  ) {
  let
    _cursor,
    _file_lock_path,
    _files_hashes_total,
    _files_locks_paths_total,
    _hash,
    _lock_call_base_opts,
    _lock_call_opts,
    _locks,
    _method_base_args,
    _method_args,
    _progress,
    _value,
    _wallet_seed_path;
  _locks =
    [];
  if ( _method_object == undefined ) {
    _method_object =
      '';
  }
  _wallet_seed_path =
    '';
  _method_object =
    '';
  _lock_call_base_opts = [
    _wallet_seed_path,
    _retries_max,
    _api_key_path,
    _target_network,
    _contract_abi_path,
    _contract_bytecode_path,
    _contract_compiler_output_path,
    _method_object,
    _contract_address,
    "lock",
  ];
  _method_base_args = [
    _publication_namespace
    // _file_hash
  ];
  _files_hashes_total =
    _files_hashes.length;
  _files_locks_paths_total =
    _files_locks_paths.length;
  _lock_input_data_check(
    _file_hashes,
    _file_hashes_total,
    _file_locks_paths_total);
  _file_lock_path =
    "";
  _progress =
    1;
  _cursor =
    0;
  for ( _hash of _file_hashes ) {
    _msg_info_lock_get(
      _hash,
      _progress,
      _file_hashes_total);
    _method_args =
      _method_base_args.concat(
        [ _hash ]
      );
    _lock_call_opts =
      _lock_call_base_opts.concat(
        [ _method_args ]);
    if ( _files_locks_path_total > 0 ) {
      _file_lock_path =
        _files_locks_paths[
          _cursor];
    }
    try {
      [ _value,
        _method_object ] =
        await _lock_get(
          _lock_call_opts);
      if ( _lock_call_base_opts[7] == "" ) {
        _msg_info(
          "Reusing contract method object.");
        _lock_call_base_opts = [
          _wallet_seed_path,
          _retries_max,
          _api_key_path,
          _target_network,
          _contract_abi_path,
          _contract_bytecode_path,
          _contract_compiler_output_path,
          _method_object,
          _contract_address,
          "lock",
        ];
      }
      _msg_info_lock_got(
        _hash,
        _progress,
        _files_hashes_total);
      if ( _file_lock_path != "" ) {
        _file_write(
          _file_lock_path,
          _value);
      }
      _file_write(
        _checkpoint_file_path,
        _hash);
    } catch (
        _error) {
      _error_display(
        _error);
      _msg_error(
        "Error getting lock status.",
        0);
      throw _error;
    }
    _locks.append(
      _lock);
    _progress =
      _progress + 1;
    _cursor =
      _cursor + 1;
  }
  return [ _locks,
           _method_object ];
}

async function
  _length_lock(
    _retries_max,
    _api_key_path,
    _target_network,
    _contract_address,
    _contract_abi_path,
    _contract_bytecode_path,
    _contract_compiler_output_path,
    _method_object,
    _publication_namespace,
    _files_hashes,
    _checkpoint_file_path,
    _chunks_locks_paths,
    _chunks_lengths_paths
  ) {
  let
    _cursor,
    _files_hashes_total,
    _files_lengths,
    _files_lengths_total,
    _file_length_path,
    _length_call_base_opts,
    _length_call_opts,
    _length_locked_opts,
    _lock_method_object,
    _method_base_args,
    _method_args,
    _progress,
    _value,
    _wallet_seed_path;
  _files_lengths =
    [];
  if ( _method_object == undefined ) {
    _method_object =
      '';
  }
  _wallet_seed_path =
    '';
  _method_object =
    '';
  _length_call_base_opts = [
    _wallet_seed_path,
    _retries_max,
    _api_key_path,
    _target_network,
    _contract_abi_path,
    _contract_bytecode_path,
    _contract_compiler_output_path,
    _method_object,
    _contract_address,
    "getLength",
  ];
  _method_base_args = [
    _publication_namespace,
    // _file_hash
  ];
  _files_hashes_total =
    _files_hashes.length;
  _files_locks_paths_total =
    _files_locks_paths.length;
  _files_lengths_paths_total =
    _files_lengths_paths.length;
  _length_input_data_check(
    _file_hashes,
    _file_hashes_total,
    _files_locks_paths_total,
    _files_lengths_paths_total);
  _progress =
    1;
  _cursor =
    0;
  _length_locked_opts = [
    _retries_max,
    _api_key_path,
    _target_network,
    _contract_address,
    _contract_abi_path,
    _contract_bytecode_path,
    _contract_compiler_output_path,
    _method_object,
    _publication_namespace,
    _files_hashes,
    _checkpoint_file_path,
    _chunks_locks_paths,
  ];
  [ _locks,
    _lock_method_object ] =
    await _length_locked.apply(
      null,
      _length_locked_opts);
  for ( _hash of _file_hashes ) {
    _msg_info_length_get(
      _hash,
      _progress,
      _files_hashes_total);
    _file_length_path =
      _files_lengths_paths[
        _cursor];
    _method_args =
      _method_base_args.concat(
        [ _hash ]
      );
    _length_call_opts =
      _length_call_base_opts.concat(
        [ _method_args ]);
    _lock =
      _locks[
        _cursor];
    if ( _lock == true ) {
      try {
        [ _value,
          _method_object ] =
          await _length_get(
            _length_call_opts);
        if ( _length_call_base_opts[7] == "" ) {
          _msg_info(
            "Reusing contract method object.");
          _length_call_base_opts = [
            _wallet_seed_path,
            _retries_max,
            _api_key_path,
            _target_network,
            _contract_abi_path,
            _contract_bytecode_path,
            _contract_compiler_output_path,
            _method_object,
            _contract_address,
            "getLength",
          ];
        }
        _msg_info_length_got(
          _hash,
          _progress,
          _chunks_total);
        if ( _file_length_path ) {
          _file_write(
            _file_length_path,
            _value);
        }
        _file_write(
          _checkpoint_file_path,
          _hash);
        _file_lengths.append(
          _value);
      } catch (
          _error) {
        _error_display(
          _error);
        _msg =
          "Error retrieving file " +
          "length.""
        _msg_error(
          _msg,
          0);
        throw _error;
      }
    }
    else if ( _lock == false ) {
      _value =
        "";
      _file_lengths.append(
        _value);
    }
    _progress =
      _progress + 1;
    _cursor =
      _cursor + 1;
  }
  return [ _files_lengths,
           _method_object ];
}

function
  _config_show() {
  let
    _chunks_files_paths,
    _line,
    _text;
  _text = 
    [];
  _text.push(
    "  Length Lock configuration:"
  );
  _text.push(
    "          Maximum retries: {retries_max}".replace(
      "{retries_max}",
      retries_max));
  _text.push(
    "                  API Key: {api_key_path}".replace(
      "{api_key_path}",
      api_key_path));
  _text.push(
    "           Target network: {target_network}".replace(
      "{target_network}",
      target_network));
  _text.push(
    "         Contract address: {contract_address}".replace(
      "{contract_address}",
      contract_address));
  _text.push(
    "             Contract ABI: {contract_abi_path}".replace(
      "{contract_abi_path}",
      contract_abi_path));
  _text.push(
    "        Contract bytecode: {contract_bytecode_path}".replace(
      "{contract_bytecode_path}",
      contract_bytecode_path));
  _text.push(
    " Contract compiler output: {contract_compiler_output_path}".replace(
      "{contract_compiler_output_path}",
      contract_compiler_output_path));
  _text.push(
    "    Publication namespace: {publication_namespace}".replace(
      "{publication_namespace}",
      publication_namespace));
  _text.push(
    "            Write to disk: {disk_write}".replace(
      "{disk_write}",
      disk_write));
  _text.push(
    "              File hashes:");
  for ( _file_hash of _files_hashes ) {
    _text.push(
      "                           {file_hash}".replace(
        "{file_hash}",
        file_hash));
  }
  _text.push(
    "          Checkpoint file: {checkpoint_file_path}".replace(
      "{checkpoint_file_path}",
      checkpoint_file_path));
  _files_lengths_paths =
    _files_lengths_paths.join(
    " ");
  _text.push(
    "              File chunks: {_chunks_files_paths}".replace(
      "{_chunks_files_paths}",
      _chunks_files_paths));
  for ( _line in _text ) {
    _msg_info(
      _text[
        _line]);
  }
}

function
  _usage(
    _exit) {
  let
    _line,
    _text;
  _text = [
    "",
    "Check if a file length is locked.",
    "",
    "Usage:",
    "  exists",
    "    <quiet>",
    "    <retries_max>",
    "    <api_key_path>",
    "    <target_network>",
    "    <contract_address>",
    "    <contract_abi_path>",
    "    <contract_bytecode_path>",
    "    <contract_compiler_output_path>",
    "    <publication_namespace>",
    "    <checkpoint_file_path>",
    "    <disk_write>",
    "    [file_hash]",
    "    ([files_length_path])",
    "",
    "Args:",
    "  <quiet>                          Can be 'y' or 'n'",
    "                                   Default: y",
    "  <retries_max>                    Maximum number of retries before",
    "                                   failing (not implemented).",
    "  <api_key_path>                   Path of the API key for the",
    "                                   contract ABI provider service.",
    "  <target_network>                 Network on which the contract",
    "                                   resides.",
    "  <contract_address>               Address of the contract.",
    "  <contract_abi_path>              Contract ABI path.",
    "  <contract_bytecode_path>         Path for the contract bytecode.",
    "  <contract_compiler_output_path>  Path for the contract compiler",
    "                                   output path (the hardhat artifact).",
    "  <publication_namespace>          Namespace in which the file will be",
    "                                   published.",
    "  <disk_write>                     Whether to write the query results",
    "                                   to a file.",
    "                                   Default: y",
    "  <file_hash>                      Hash of the file to publish.",
    "  <index_start>                    Chunk index from where to start.",
    "  <index_end>                      Final chunk index to download.",
    "  <checkpoint_file_path>           Checkpoint file on which latest",
    "                                   downloaded chunk index is saved",
    "                                   in case node was to crash.",
    "  [chunk_file_path]                Files in which to write the chunks.",
  ];
  for ( _line of _text ) {
    _msg_info(
      _line);
  }
  process.exit(
    _exit);
}


function 
  _cmdline_parse() {
  quiet = 
    "y";
  process.argv.forEach(
    function (
      _value,
      _index,
      _array) {
      if ( _index == 2 ) {
        quiet =
          _value;
      }
      if ( _index == 3 ) {
        retries_max =
          _value;
      }
      if ( _index == 4 ) {
        api_key_path =
          _value;
      }
      if ( _index == 5 ) {
        target_network =
          _value;
      }
      if ( _index == 6 ) {
        contract_address =
          _value;
      }
      if ( _index == 7 ) {
        contract_abi_path =
          _value;
      }
      if ( _index == 8 ) {
        contract_bytecode_path =
          _value;
      }
      if ( _index == 9 ) {
        contract_compiler_output_path =
          _value;
      }
      if ( _index == 10 ) {
        publication_namespace =
          _value;
      }
      if ( _index == 11 ) {
        file_hash =
          _value;
      }
      if ( _index == 12 ) {
        index_start =
          _value;
      }
      if ( _index == 13 ) {
        index_end =
          _value;
      }
      if ( _index == 14 ) {
        checkpoint_file_path =
          _value;
      }
      if ( 14 < _index ) {
	chunks_files_paths.push(
          _value);
      }
      if ( _value == "-h" ||
           _value == "--help" ) {
        _usage(
	  0);
      }
  });
  if ( file_hash == "" ||
       publication_namespace == "" ) {
    _usage(
      1);
  }
}

if ( _cmdline_check(
       "lengthlock") ) {
  _global_variables();
  _cmdline_parse();
  _config_show();
  app_opts = [
    retries_max,
    api_key_path,
    target_network,
    contract_address,
    contract_abi_path,
    contract_bytecode_path,
    contract_compiler_output_path,
    method_object,
    publication_namespace,
    file_hash,
    index_start,
    index_end,
    checkpoint_file_path,
    chunks_files_paths,
  ];
  _length_lock.apply(
    null,
    app_opts);
}

module.exports = {
  _length_locked:
    _length_locked,
  _length_lock:
    _length_lock
};
