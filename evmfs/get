#!/usr/bin/env node

// SPDX-License-Identifier: AGPL-3.0-or-later

//    ----------------------------------------------------------------------
//    Copyright Â© 2024, 2025  Pellegrino Prevete
//
//    All rights reserved
//    ----------------------------------------------------------------------
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <https://www.gnu.org/licenses/>.

const
  _libcrash =
    require(
      '../libcrash-js/crash-js');
_cmdline_check =
  _libcrash._cmdline_check;
_error_display =
  _libcrash._error_display;
_file_write =
  _libcrash._file_write;
_msg_info =
  _libcrash._msg_info;
_msg_error =
  _libcrash._msg_error;
const
  _evm_contract_call =
  require(
    '../evm-contracts-tools/evm-contract-call-static');
_contract_call_static =
  _evm_contract_call._contract_call_static

function
  _global_variables() {
  app_name =
    "get";
  retries_max =
    '';
  api_key_path =
    "";
  target_network =
    "";
  contract_address =
    "";
  contract_abi_path =
    "";
  contract_bytecode_path =
    "";
  contract_compiler_output_path =
    "";
  method_object =
    "";
  publication_namespace =
    "";
  file_hash =
    "";
  index_start =
    "";
  index_end =
    "";
  checkpoint_file_path =
    "";
  chunks_files_paths =
    [];
  quiet =
    "";
}

function
  _msg_info_chunk_get(
    _index,
    _progress,
    _total) {
  let
    _msg,
    _template;
  _template =
    "Downloading chunk '{_index}' ('{_progress}'of '{_total}').";
  _msg =
    _template.replaceAll(
      "{_index}",
      _index);
  _msg =
    _msg.replaceAll(
      "{_progress}",
      _progress);
  _msg =
    _msg.replaceAll(
      "{_total}",
      _total);
  _msg_info(
    _msg);
}

function
  _msg_info_chunk_got(
    _index,
    _progress,
    _total) {
  let
    _msg,
    _template;
  _template =
    "Downloaded chunk '{_index}' ('{_progress}'of '{_total}').";
  _msg =
    _template.replaceAll(
      "{_index}",
      _index);
  _msg =
    _msg.replaceAll(
      "{_progress}",
      _progress);
  _msg =
    _msg.replaceAll(
      "{_total}",
      _total);
  _msg_info(
    _msg);
}

async function
  _chunk_get(
    _read_call_opts) {
  let
    _method_object,
    _passed,
    _retry,
    _value;
  try {
    [_value,
     _method_object] = 
      await _contract_call_static.apply(
        null,
        _read_call_opts);
  } catch (
      _error) {
    _error_display(
      _error);
    _msg_error(
      "Error retrieving chunk.",
      0);
    throw _error;
  }
  return [
    _value.toString(),
    _method_object];
}

function
  _input_data_check(
    _index_start,
    _index_end,
    _total_files) {
  let
    _total_indexes;
  _total_indexes =
    _index_end - _index_start + 1;
  if ( _total_files > _total_indexes ) {
    _msg_error(
      "More files to save into than indexes to download.",
      1);
  }
  if ( _total_files < _total_indexes ) {
    _msg_error(
      "More indexes downloads than files to save into.",
      1);
  }
  _msg_info(
    "Input data checked.");
}

function
  _chunk_file_path_check(
    _path,
    _index,
    _cursor) {
  if ( _path == undefined ) {
    console.error(
      "Chunk file for index",
      _index,
      "and cursor",
      _cursor,
      "undefined.");
    process.exit(
      1);
  }
}

async function
  _get(
    _retries_max,
    _api_key_path,
    _target_network,
    _contract_address,
    _contract_abi_path,
    _contract_bytecode_path,
    _contract_compiler_output_path,
    _method_object,
    _publication_namespace,
    _file_hash,
    _index_start,
    _index_end,
    _checkpoint_file_path,
    _chunks_files_paths
  ) {
  let
    _checkpoint_index,
    _chunk_file_path,
    _chunks_total,
    _cursor,
    _read_call_base_opts,
    _read_call_opts,
    _method_base_args,
    _method_args,
    _progress,
    _value,
    _wallet_seed_path;
  if ( _method_object == undefined ) {
    _method_object =
      '';
  }
  _wallet_seed_path =
    '';
  _method_object =
    '';
  _read_call_base_opts = [
    _wallet_seed_path,
    _retries_max,
    _api_key_path,
    _target_network,
    _contract_abi_path,
    _contract_bytecode_path,
    _contract_compiler_output_path,
    _method_object,
    _contract_address,
    "readChunk",
  ];
  _method_base_args = [
    _publication_namespace,
    _file_hash
  ];
  _chunks_total =
    _chunks_files_paths.length;
  if ( _chunks_total == 0 ) {
    _msg_error(
      "file chunks list empty",
      1);
  }
  _input_data_check(
    _index_start,
    _index_end,
    _chunks_total);
  _progress =
    1;
  _cursor =
    0;
  for ( var _index = _index_start;
        _index <= _index_end;
        _index++ ) {
    _msg_info_chunk_get(
      _index,
      _progress,
      _chunks_total);
    _chunk_file_path =
      _chunks_files_paths[_cursor];
    _chunk_file_path_check(
      _chunk_file_path,
      _index,
      _cursor);
    _method_args =
      _method_base_args.concat(
        [_index.toString()]
      );
    _read_call_opts =
      _read_call_base_opts.concat(
        [_method_args]);
    try {
      [_value,
       _method_object] =
        await _chunk_get(
          _read_call_opts);
      // I have no idea if _read_call_base_opts
      // has its components passed by reference
      // or copied so I have no idea if
      // _method_object gets immediately updated
      // or I need to re-init the array so just
      // in case we re-init whole array.
      if ( _read_call_base_opts[7] == "" ) {
        _msg_info(
          "Reusing contract method object.");
        _read_call_base_opts = [
          _wallet_seed_path,
          _retries_max,
          _api_key_path,
          _target_network,
          _contract_abi_path,
          _contract_bytecode_path,
          _contract_compiler_output_path,
          _method_object,
          _contract_address,
          "readChunk",
        ];
      }
      _msg_info_chunk_got(
        _index,
        _progress,
        _chunks_total);
      _file_write(
        _chunk_file_path,
        _value);
      _checkpoint_index =
        _index.toString();
      _file_write(
        _checkpoint_file_path,
        _checkpoint_index);
    } catch (
        _error) {
      _error_display(
        _error);
      _msg_error(
        "Error retrieving chunk.",
        0);
      throw _error;
    }
    _progress =
      _progress + 1;
    _cursor =
      _cursor + 1;
  }
  return _method_object;
}

function
  _config_show() {
  let
    _chunks_files_paths,
    _line,
    _text;
  _text = 
    [];
  _text.push(
    "          Maximum retries: {retries_max}".replace(
      "{retries_max}",
      retries_max));
  _text.push(
    "                  API Key: {api_key_path}".replace(
      "{api_key_path}",
      api_key_path));
  _text.push(
    "           Target network: {target_network}".replace(
      "{target_network}",
      target_network));
  _text.push(
    "         Contract address: {contract_address}".replace(
      "{contract_address}",
      contract_address));
  _text.push(
    "             Contract ABI: {contract_abi_path}".replace(
      "{contract_abi_path}",
      contract_abi_path));
  _text.push(
    "        Contract bytecode: {contract_bytecode_path}".replace(
      "{contract_bytecode_path}",
      contract_bytecode_path));
  _text.push(
    " Contract compiler output: {contract_compiler_output_path}".replace(
      "{contract_compiler_output_path}",
      contract_compiler_output_path));
  _text.push(
    "    Publication namespace: {publication_namespace}".replace(
      "{publication_namespace}",
      publication_namespace));
  _text.push(
    "                File hash: {file_hash}".replace(
      "{file_hash}",
      file_hash));
  _text.push(
    "              Index start: {index_start}".replace(
      "{index_start}",
      index_start));
  _text.push(
    "                Index end: {index_end}".replace(
      "{index_end}",
      index_end));
  _text.push(
    "          Checkpoint file: {checkpoint_file_path}".replace(
      "{checkpoint_file_path}",
      checkpoint_file_path));
  _chunks_files_paths =
    chunks_files_paths.join(
    " ");
  _text.push(
    "              File chunks: {_chunks_files_paths}".replace(
      "{_chunks_files_paths}",
      _chunks_files_paths));
  for ( _line in _text ) {
    _msg_info(
      _text[_line]);
  }
}

function
  _usage(
    _exit) {
  let
    _line,
    _text;
  _text = [
    "Downloads chunks of an EVMFS file.",
    "",
    "Usage:",
    "  get",
    "    <quiet>",
    "    <retries_max>",
    "    <api_key_path>",
    "    <target_network>",
    "    <contract_address>",
    "    <contract_abi_path>",
    "    <contract_bytecode_path>",
    "    <contract_compiler_output_path>",
    "    <publication_namespace>",
    "    <index_start>",
    "    <file_hash>",
    "    <index_start>",
    "    <index_end>",
    "    <checkpoint_file_path>",
    "    [chunk_file_path]",
    "",
    "Args:",
    "  <quiet>                          Can be 'y' or 'n'",
    "                                   Default: y",
    "  <retries_max>                    Maximum number of retries before",
    "                                   failing (not implemented).",
    "  <api_key_path>                   Path of the API key for the",
    "                                   contract ABI provider service.",
    "  <target_network>                 Network on which the contract",
    "                                   resides.",
    "  <contract_address>               Address of the contract.",
    "  <contract_abi_path>              Contract ABI path.",
    "  <contract_bytecode_path>         Path for the contract bytecode.",
    "  <contract_compiler_output_path>  Path for the contract compiler",
    "                                   output path (the hardhat artifact).",
    "  <publication_namespace>          Namespace in which the file will be",
    "                                   published.",
    "  <file_hash>                      Hash of the file to publish.",
    "  <index_start>                    Chunk index from where to start.",
    "  <index_end>                      Final chunk index to download.",
    "  <checkpoint_file_path>           Checkpoint file on which latest",
    "                                   downloaded chunk index is saved",
    "                                   in case node was to crash.",
    "  [chunk_file_path]                Files in which to write the chunks.",
  ];
  for ( _line of _text ) {
    _msg_info(
      _line);
  }
  process.exit(
    _exit);
}


function 
  _cmdline_parse() {
  quiet = 
    "y";
  process.argv.forEach(
    function (
      _value,
      _index,
      _array) {
      if ( _index == 2 ) {
        quiet =
          _value;
      }
      if ( _index == 3 ) {
        retries_max =
          _value;
      }
      if ( _index == 4 ) {
        api_key_path =
          _value;
      }
      if ( _index == 5 ) {
        target_network =
          _value;
      }
      if ( _index == 6 ) {
        contract_address =
          _value;
      }
      if ( _index == 7 ) {
        contract_abi_path =
          _value;
      }
      if ( _index == 8 ) {
        contract_bytecode_path =
          _value;
      }
      if ( _index == 9 ) {
        contract_compiler_output_path =
          _value;
      }
      if ( _index == 10 ) {
        publication_namespace =
          _value;
      }
      if ( _index == 11 ) {
        file_hash =
          _value;
      }
      if ( _index == 12 ) {
        index_start =
          _value;
      }
      if ( _index == 13 ) {
        index_end =
          _value;
      }
      if ( _index == 14 ) {
        checkpoint_file_path =
          _value;
      }
      if ( 14 < _index ) {
	chunks_files_paths.push(
          _value);
      }
      if ( _value == "-h" ||
           _value == "--help" ) {
        _usage(
	  0);
      }
  });
  if ( file_hash == "" ||
       publication_namespace == "" ) {
    _usage(
      1);
  }
}

if ( _cmdline_check(
       "get") ) {
  _global_variables();
  _cmdline_parse();
  _config_show();
  app_opts = [
    retries_max,
    api_key_path,
    target_network,
    contract_address,
    contract_abi_path,
    contract_bytecode_path,
    contract_compiler_output_path,
    method_object,
    publication_namespace,
    file_hash,
    index_start,
    index_end,
    checkpoint_file_path,
    chunks_files_paths,
  ];
  _get.apply(
    null,
    app_opts);
}

module.exports = {
  _chunk_get:
    _chunk_get,
  _get:
    _get
};
