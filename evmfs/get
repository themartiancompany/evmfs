#!/usr/bin/env node

const
  _libcrash =
  require(
    '../libcrash-js/crash-js');
_dirname =
  _libcrash._dirname;
_file_write =
  _libcrash._file_write;
_path_join =
  _libcrash._path_join;
const
  _evm_contract_call =
  require(
    '../evm-contracts-tools/evm-contract-call-static');
_contract_call_static =
  _evm_contract_call._contract_call_static
_msg_info =
  _libcrash._msg_info;
_msg_error =
  _libcrash._msg_error;

function
  _global_variables() {
  api_key_path =
    "";
  target_network =
    "";
  contract_address =
    "";
  contract_abi_path =
    "";
  contract_bytecode_path =
    "";
  contract_compiler_output_path =
    "";
  publication_namespace =
    "";
  file_hash =
    "";
  index_start =
    "";
  index_end =
    "";
  file_chunks =
    [];
  quiet =
    "";
}

function
  _msg_info_chunk_get(
    _index,
    _progress,
    _total) {
  let
    _msg,
    _template;
  _template =
    "getting chunk '{_index}' ('{_progress}'of '{_total}')";
  _msg =
    _template.replaceAll(
      "{_index}",
      _index);
  _msg =
    _msg.replaceAll(
      "{_progress}",
      _progress);
  _msg =
    _msg.replaceAll(
      "{_total}",
      _total);
  _msg_info(
    _msg);
}

function
  _msg_info_chunk_got(
    _index,
    _progress,
    _total) {
  let
    _msg,
    _template;
  _template =
    "got chunk '{_index}' ('{_progress}'of '{_total}')";
  _msg =
    _template.replaceAll(
      "{_index}",
      _index);
  _msg =
    _msg.replaceAll(
      "{_progress}",
      _progress);
  _msg =
    _msg.replaceAll(
      "{_total}",
      _total);
  _msg_info(
    _msg);
}

async function
  _chunk_get(
    _contract_call_static_opts) {
  let
    _value;
  try {
    _value = 
      await _contract_call_static.apply(
        null,
        _contract_call_static_opts);
  } catch(e) {
    _msg_error(
      e,
      1);
  }
  return _value.toString();
}

function
  _input_data_check(
    _index_start,
    _index_end,
    _total_files) {
  let
    _total_indexes;
  _total_indexes =
    _index_end - _index_start + 1;
  if ( _total_files > _total_indexes ) {
    _msg_error(
      "more files to save into than downloads",
      1);
  }
  if ( _total_files < _total_indexes ) {
    _msg_error(
      "more downloads than files to save into",
      1);
  }
}

async function
  _get(
    _api_key_path,
    _target_network,
    _contract_address,
    _contract_abi_path,
    _contract_bytecode_path,
    _contract_compiler_output_path,
    _publication_namespace,
    _file_hash,
    _index_start,
    _index_end,
    _file_chunks
  ) {
  let
    _contract_call_static_base_opts,
    _contract_call_static_opts,
    _chunks_total,
    _file_chunk,
    _file_chunk_path,
    _method_base_args,
    _method_args,
    _msg,
    _progress,
    _value,
    _wallet_password;
  _wallet_password =
    "";
  _contract_call_static_base_opts = [
    _api_key_path,
    _target_network,
    _contract_abi_path,
    _contract_bytecode_path,
    _contract_compiler_output_path,
    _contract_address,
    "readChunk",
  ];
  _method_base_args = [
    _publication_namespace,
    _file_hash
  ];
  if ( _file_chunks == [] ) {
    _msg_error(
      "file chunks list empty",
      1);
  }
  _chunks_total =
    _file_chunks.length;
  _input_data_check(
    _file_chunks,
    _index_start,
    _index_end);
  _progress =
    1;
  for ( var _index =_index_start;
	_index <= _index_end;
	_index++ ) {
    _msg_info_chunk_get(
      _index,
      _progress,
      _chunks_total);
    _file_chunk_path =
      _file_chunks[_index];
    _contract_call_static_opts =
      _contract_call_static_base_opts;
    _method_args =
      _method_base_args;
    _method_args.push(
      _index.toString());
    _contract_call_static_opts.push(
      _method_args);
    _value = await
      _chunk_get(
        _contract_call_static_opts);
    _msg_info_chunk_got(
      _index,
      _progress,
      _chunks_total);
    _file_write(
      _file_chunk_path,
      _value);
    _progress =
      _progress + 1;
  }
}

function
  _config_show() {
  let
    _file_chunks,
    _line,
    _text;
  _text = 
    [];
  _text.push(
    "                  API Key: {api_key_path}".replace(
      "{api_key_path}",
      api_key_path));
  _text.push(
    "           Target network: {target_network}".replace(
      "{target_network}",
      target_network));
  _text.push(
    "         Contract address: {contract_address}".replace(
      "{contract_address}",
      contract_address));
  _text.push(
    "             Contract ABI: {contract_abi_path}".replace(
      "{contract_abi_path}",
      contract_abi_path));
  _text.push(
    "        Contract bytecode: {contract_bytecode_path}".replace(
      "{contract_bytecode_path}",
      contract_bytecode_path));
  _text.push(
    " Contract compiler output: {contract_compiler_output_path}".replace(
      "{contract_compiler_output_path}",
      contract_compiler_output_path));
  _text.push(
    "    Publication namespace: {publication_namespace}".replace(
      "{publication_namespace}",
      publication_namespace));
  _text.push(
    "                File hash: {file_hash}".replace(
      "{file_hash}",
      file_hash));
  _text.push(
    "              Index start: {index_start}".replace(
      "{index_start}",
      index_start));
  _text.push(
    "                Index end: {index_end}".replace(
      "{index_end}",
      index_end));
  _file_chunks =
    file_chunks.join(
    " ");
  _text.push(
    "              File chunks: {_file_chunks}".replace(
      "{_file_chunks}",
      _file_chunks));
  for ( _line in _text ) {
    _msg_info(
      _text[_line]);
  }
}

function
  _usage(
    _exit) {
  let
    _line,
    _text;
  _text = [
    "Downloads chunks of an EVMFS file.",
    "",
    "Usage:",
    "  get",
    "    <quiet>",
    "    <api_key_path>",
    "    <target_network>",
    "    <contract_address>",
    "    <contract_abi_path>",
    "    <contract_bytecode_path>",
    "    <contract_compiler_output_path>",
    "    <publication_namespace>",
    "    <index_start>",
    "    <file_hash>",
    "    <index_start>",
    "    <index_end>",
    "    [file_chunk]",
    "",
    "Args:",
    "  <quiet>                          Can be 'y' or 'n'",
    "                                   Default: y",
    "  <api_key_path>                   Path of the API key for the",
    "                                   contract ABI provider service.",
    "  <target_network>                 Network on which the contract",
    "                                   resides.",
    "  <contract_address>               Address of the contract.",
    "  <contract_abi_path>              Contract ABI path.",
    "  <contract_bytecode_path>         Path for the contract bytecode.",
    "  <contract_compiler_output_path>  Path for the contract compiler",
    "                                   output path (the hardhat artifact).",
    "  <publication_namespace>          Namespace in which the file will be",
    "                                   published.",
    "  <file_hash>                      Hash of the file to publish.",
    "  <index_start>                    Chunk index from where to start.",
    "  <index_end>                      Final chunk index to download.",
    "  [file_chunk]                     Files in which to write the chunks.",
  ];
  for ( _line of _text ) {
    _msg_info(
      _line);
  }
  process.exit(
    _exit);
}


function 
  _cmdline_parse() {
  quiet = 
    "y";
  process.argv.forEach(
    function (
      _value,
      _index,
      _array) {
      if ( _index == 2 ) {
        quiet =
          _value;
      }
      if ( _index == 3 ) {
        api_key_path =
          _value;
      }
      if ( _index == 4 ) {
        target_network =
          _value;
      }
      if ( _index == 5 ) {
        contract_address =
          _value;
      }
      if ( _index == 6 ) {
        contract_abi_path =
          _value;
      }
      if ( _index == 7 ) {
        contract_bytecode_path =
          _value;
      }
      if ( _index == 8 ) {
        contract_compiler_output_path =
          _value;
      }
      if ( _index == 9 ) {
        publication_namespace =
          _value;
      }
      if ( _index == 10 ) {
        file_hash =
          _value;
      }
      if ( _index == 11 ) {
        index_start =
          _value;
      }
      if ( _index == 12 ) {
        index_end =
          _value;
      }
      if ( 12 < _index ) {
	file_chunks.push(
          _value);
      }
      if ( _value == "-h" ||
           _value == "--help" ) {
        _usage(
	  1);
      }
  });
  if ( file_hash == "" ||
       publication_namespace == "" ) {
    _usage(
      1);
  }
}


_global_variables();

if ( require.main == module ) {
  _cmdline_parse();
  _config_show();
  app_opts = [
    api_key_path,
    target_network,
    contract_address,
    contract_abi_path,
    contract_bytecode_path,
    contract_compiler_output_path,
    publication_namespace,
    file_hash,
    index_start,
    index_end,
    file_chunks,
  ];
  _get.apply(
    null,
    app_opts);
}

module.exports = {
  _get:
    _get
};
