#!/usr/bin/env node

// SPDX-License-Identifier: AGPL-3.0-or-later

//    ----------------------------------------------------------------------
//    Copyright Â© 2024, 2025  Pellegrino Prevete
//
//    All rights reserved
//    ----------------------------------------------------------------------
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <https://www.gnu.org/licenses/>.

const
  _libcrash =
    require(
      '../libcrash-js/crash-js');
_cmdline_check =
  _libcrash._cmdline_check;
_file_write =
  _libcrash._file_write;
_path_join =
  _libcrash._path_join;
_msg_info =
  _libcrash._msg_info;
_msg_error =
  _libcrash._msg_error;
const
  _evm_contract_call_module =
    require(
      '../evm-contracts-tools/evm-contract-call-static');
_contract_call_static =
  _evm_contract_call_module._contract_call_static
const
  _libevm_module =
    require(
      '../libevm/libevm-js');
_contract_abi_get =
  _libevm_module._contract_abi_get
_contract_bytecode_get =
  _libevm_module._contract_bytecode_get
_contract_compiler_output_get =
  _libevm_module._contract_compiler_output_get
_evm_chains_rpc_backend_get =
  _libevm_module._rpc_backend_get
const
  _get_module =
    require(
      "./get");
_get =
  _get_module._get;

function
  _global_variables() {
  app_name =
    "ccget";
  retries_max =
    "";
  api_key_path =
    "";
  target_network =
    "";
  deployments_dir =
    "";
  fs_version =
    "";
  rpc_selection =
    "";
  contract_address =
    "";
  contract_abi_path =
    "";
  contract_bytecode_path =
    "";
  contract_compiler_output_path =
    "";
  publication_namespace =
    "";
  file_hash =
    "";
  index_start =
    "";
  index_end =
    "";
  checkpoint_file_path =
    "";
  chunks_files_paths =
    [];
  quiet =
    "";
}

function
  _msg_info_chunk_dereference(
    _index,
    _progress,
    _total) {
  let
    _msg,
    _template;
  _template =
    "Dereferencing chunk '{_index}' ('{_progress}'of '{_total}').";
  _msg =
    _template.replaceAll(
      "{_index}",
      _index);
  _msg =
    _msg.replaceAll(
      "{_progress}",
      _progress);
  _msg =
    _msg.replaceAll(
      "{_total}",
      _total);
  _msg_info(
    _msg);
}

function
  _msg_info_chunk_dereferenced(
    _index,
    _progress,
    _total) {
  let
    _msg,
    _template;
  _template =
    "Derefereced chunk '{_index}' ('{_progress}'of '{_total}').";
  _msg =
    _template.replaceAll(
      "{_index}",
      _index);
  _msg =
    _msg.replaceAll(
      "{_progress}",
      _progress);
  _msg =
    _msg.replaceAll(
      "{_total}",
      _total);
  _msg_info(
    _msg);
}

function
  _error_handle(
    error) {
  let
    _message;
  if ( 'error' in error && 
       error['error'] != undefined &&
       'message' in error['error'] ) {
    _message =
      error['error']['message'];
  }
  else if ( 'shortMessage' in error ) {
    _message =
      error['shortMessage'];
  }
  _msg_error(
    _message,
    0);
}

_rpc_backend_get(
  _rpcs,
  _chain_id,
  _selection_method) {
  let
    _evm_chains_rpc_backend_opts,
    _rpc;
  _rpc =
    _rpcs[
      _chain_id];
  if ( _rpc == undefined ) {
    _evm_chains_rpc_backend_opts = [
      _chain_id,
      _selection_method,
      // _evm_chains_db_path
    ];
    rpcs[
      _chain_id] =
      _evm_chains_rpc_backend_get.apply(
	null,
	_evm_chains_rpc_backend_opts);
  }
  return rpcs;
}

async function
  _chunk_chain_id_get(
    _read_chain_id_call_opts) {
  let
    _value;
  try {
    _value = 
      await _contract_call_static.apply(
        null,
        _read_chain_id_call_opts);
  } catch (e) {
    _msg_error(
      "Error retrieving chainID for chunk.",
      0);
    throw e;
  }
  return _value.toString();
}

async function
  _chunk_fs_get(
    _read_fs_call_opts) {
  let
    _value;
  try {
    _value = 
      await _contract_call_static.apply(
        null,
        _read_fs_call_opts);
  } catch (e) {
    _msg_error(
      "Error retrieving fs address for chunk.",
      0);
    throw e;
  }
  return _value.toString();
}

function
  _input_data_check(
    _index_start,
    _index_end,
    _total_files) {
  let
    _total_indexes;
  _total_indexes =
    _index_end - _index_start + 1;
  if ( _total_files > _total_indexes ) {
    _msg_error(
      "More files to save into than indexes to download.",
      1);
  }
  if ( _total_files < _total_indexes ) {
    _msg_error(
      "More indexes downloads than files to save into.",
      1);
  }
  _msg_info(
    "Input data checked.");
}

async function
  _ccget(
    _retries_max,
    _api_key_path,
    _target_network,
    _deployments_dir,
    _fs_version,
    _rpc_selection,
    _contract_address,
    _contract_abi_path,
    _contract_bytecode_path,
    _contract_compiler_output_path,
    _publication_namespace,
    _file_hash,
    _index_start,
    _index_end,
    _checkpoint_file_path,
    _chunks_files_paths
  ) {
  let
    _chunk_chain_id,
    _chunk_file_path,
    _chunk_fs,
    _chunks_total,
    _cursor,
    _fs_contract_abi_path,
    _fs_contract_bytecode_path,
    _fs_contract_compiler_output_path,
    _get_opts,
    _read_chain_id_call_base_opts,
    _read_chain_id_call_opts,
    _read_chain_id_base_args,
    _read_chain_id_args,
    _read_fs_call_base_opts,
    _read_fs_call_opts,
    _read_fs_base_args,
    _read_fs_args,
    _rpcs,
    _rpc_backend,
    _rpc_selection,
    _progress,
    _value,
    _wallet_seed_path;
  if ( _rpc_selection == "" || \
       _rpc_selection == undefined ) {
    _rpc_selection =
      "kirsh"
  }
  _rpcs =
    {};
  _get_opts =
    [];
  _wallet_seed_path =
    "";
  _read_chain_id_call_base_opts = [
    _wallet_seed_path,
    _retries_max,
    _api_key_path,
    _target_network,
    _contract_abi_path,
    _contract_bytecode_path,
    _contract_compiler_output_path,
    _contract_address,
    "chunksChainId",
  ];
  _read_chain_id_base_args = [
    _publication_namespace,
    _file_hash
  ];
  _read_fs_call_base_opts = [
    _wallet_seed_path,
    _retries_max,
    _api_key_path,
    _target_network,
    _contract_abi_path,
    _contract_bytecode_path,
    _contract_compiler_output_path,
    _contract_address,
    "chunksFs",
  ];
  _read_fs_base_args = [
    _publication_namespace,
    _file_hash
  ];
  _chunks_total =
    _chunks_files_paths.length;
  if ( _chunks_total == 0 ) {
    _msg_error(
      "file chunks list empty",
      1);
  }
  _input_data_check(
    _index_start,
    _index_end,
    _chunks_total);
  _progress =
    1;
  _cursor =
    0;
  for ( var _index = _index_start;
	_index <= _index_end;
	_index++ ) {
    _msg_info_chunk_dereference(
      _index,
      _progress,
      _chunks_total);
    _chunk_file_path =
      _chunks_files_paths[_cursor];
    _read_chain_id_args =
      _read_chain_id_base_args.concat(
        [_index.toString(),
         0.toString()]
      );
    _read_chain_id_call_opts =
      _read_chain_id_call_base_opts.concat(
        [_read_chain_id_args]);
    try {
      _chunk_chain_id = await
        _chunk_chain_id_get(
          _read_chain_id_call_opts);
    } catch (e) {
      _msg_error(
        "Error retrieving chunk's ChainId.",
        0);
      throw e;
    }
    _read_fs_args =
      _read_fs_base_args.concat(
        [_index.toString(),
         0.toString(),
	 _chunk_chain_id]
      );
    _read_fs_call_opts =
      _read_fs_call_base_opts.concat(
        [_read_fs_args]);
    try {
      _chunk_fs = await
        _chunk_fs_get(
          _read_fs_call_opts);
    } catch (e) {
      _msg_error(
        "Error retrieving chunk's fs address.",
        0);
      throw e;
    }
    _msg_info_chunk_dereferenced(
      _index,
      _progress,
      _chunks_total);
    _fs_contract_abi_path =
      _contract_abi_get(
        _deployments_dir,
        "FileSystem",
        _chunk_chain_id,
        _fs_version);
    _fs_contract_bytecode_path =
      _contract_bytecode_get(
        _deployments_dir,
        "FileSystem",
        _chunk_chain_id,
        _fs_version);
    _fs_contract_compiler_output_path =
      _contract_compiler_output_get(
        _deployments_dir,
        "FileSystem",
        _chunk_chain_id,
        _fs_version);
    _rpcs =
      _rpc_backend_get(
        _rpcs,
        _chunk_chain_id,
        _rpc_selection);
    _rpc_backend =
      _rpcs[
        _chunk_chain_id];
    _get_opts = [
      _retries_max,
      _api_key_path,
      _rpc_backend,
      _chunk_fs,
      _fs_contract_abi_path,
      _fs_contract_bytecode_path,
      _fs_contract_compiler_output_path,
      _publication_namespace,
      _file_hash,
      _index,
      _index,
      _checkpoint_file_path,
      [_chunk_file_path]
    ];
    _get.apply(
      null,
      _get_opts);
    _progress =
      _progress + 1;
    _cursor =
      _cursor + 1;
  }
}

function
  _overrides_set() {
  if ( rpc_selection == "" ) {
    rpc_selection =
      "kirsh";
  }
}

function
  _config_show() {
  let
    _chunks_files_paths,
    _line,
    _text;
  _text = 
    [];
  _text.push(
    "          Maximum retries: {retries_max}".replace(
      "{retries_max}",
      retries_max));
  _text.push(
    "                  API Key: {api_key_path}".replace(
      "{api_key_path}",
      api_key_path));
  _text.push(
    "           Target network: {target_network}".replace(
      "{target_network}",
      target_network));
  _text.push(
    "          Deployments dir: {deployments_dir}".replace(
      "{deployments_dir}",
      deployments_dir));
  _text.push(
    "      File System version: {fs_version}".replace(
      "{fs_version}",
      fs_version));
  _text.push(
    "            RPC selection: {rpc_selection}".replace(
      "{rpc_selection}",
      rpc_selection));
  _text.push(
    "         Contract address: {contract_address}".replace(
      "{contract_address}",
      contract_address));
  _text.push(
    "             Contract ABI: {contract_abi_path}".replace(
      "{contract_abi_path}",
      contract_abi_path));
  _text.push(
    "        Contract bytecode: {contract_bytecode_path}".replace(
      "{contract_bytecode_path}",
      contract_bytecode_path));
  _text.push(
    " Contract compiler output: {contract_compiler_output_path}".replace(
      "{contract_compiler_output_path}",
      contract_compiler_output_path));
  _text.push(
    "    Publication namespace: {publication_namespace}".replace(
      "{publication_namespace}",
      publication_namespace));
  _text.push(
    "                File hash: {file_hash}".replace(
      "{file_hash}",
      file_hash));
  _text.push(
    "              Index start: {index_start}".replace(
      "{index_start}",
      index_start));
  _text.push(
    "                Index end: {index_end}".replace(
      "{index_end}",
      index_end));
  _text.push(
    "          Checkpoint file: {checkpoint_file_path}".replace(
      "{checkpoint_file_path}",
      checkpoint_file_path));
  _chunks_files_paths =
    chunks_files_paths.join(
    " ");
  _text.push(
    "              File chunks: {_chunks_files_paths}".replace(
      "{_chunks_files_paths}",
      _chunks_files_paths));
  for ( _line in _text ) {
    _msg_info(
      _text[_line]);
  }
}

function
  _usage(
    _exit) {
  let
    _line,
    _text;
  _text = [
    "Downloads chunks of an EVMFS file.",
    "",
    "Usage:",
    "  get",
    "    <quiet>",
    "    <retries_max>",
    "    <api_key_path>",
    "    <target_network>",
    "    <deployments_dir>",
    "    <fs_version>",
    "    <rpc_selection>",
    "    <contract_address>",
    "    <contract_abi_path>",
    "    <contract_bytecode_path>",
    "    <contract_compiler_output_path>",
    "    <publication_namespace>",
    "    <index_start>",
    "    <file_hash>",
    "    <index_start>",
    "    <index_end>",
    "    <checkpoint_file_path>",
    "    [chunk_file_path]",
    "",
    "Args:",
    "  <quiet>                          Can be 'y' or 'n'",
    "                                   Default: y",
    "  <retries_max>                    Maximum number of retries before",
    "                                   failing (not implemented).",
    "  <api_key_path>                   Path of the API key for the",
    "                                   contract ABI provider service.",
    "  <target_network>                 Network on which the contract",
    "                                   resides.",
    "  <deployments_dir>                Contracts deployments directory.",
    "  <fs_version>                     Version of the target file",
    "                                   system contract.",
    "                                   Default: 1.0",
    "  <rpc_selection>                  RPC selection method.",
    "                                   Default: kirsh",
    "  <contract_address>               Address of the contract.",
    "  <contract_abi_path>              Contract ABI path.",
    "  <contract_bytecode_path>         Path for the contract bytecode.",
    "  <contract_compiler_output_path>  Path for the contract compiler",
    "                                   output path (the hardhat artifact).",
    "  <publication_namespace>          Namespace in which the file will be",
    "                                   published.",
    "  <file_hash>                      Hash of the file to publish.",
    "  <index_start>                    Chunk index from where to start.",
    "  <index_end>                      Final chunk index to download.",
    "  <checkpoint_file_path>           Checkpoint file on which latest",
    "                                   downloaded chunk index is saved",
    "                                   in case node was to crash.",
    "  [chunk_file_path]                Files in which to write the chunks.",
  ];
  for ( _line of _text ) {
    _msg_info(
      _line);
  }
  process.exit(
    _exit);
}


function 
  _cmdline_parse() {
  quiet = 
    "y";
  process.argv.forEach(
    function (
      _value,
      _index,
      _array) {
      if ( _index == 2 ) {
        quiet =
          _value;
      }
      if ( _index == 3 ) {
        retries_max =
          _value;
      }
      if ( _index == 4 ) {
        api_key_path =
          _value;
      }
      if ( _index == 5 ) {
        target_network =
          _value;
      }
      if ( _index == 6 ) {
        deployments_dir =
          _value;
      }
      if ( _index == 7 ) {
        fs_version =
          _value;
      }
      if ( _index == 8 ) {
        rpc_selection =
          _value;
      }
      if ( _index == 9 ) {
        contract_address =
          _value;
      }
      if ( _index == 10 ) {
        contract_abi_path =
          _value;
      }
      if ( _index == 11 ) {
        contract_bytecode_path =
          _value;
      }
      if ( _index == 12 ) {
        contract_compiler_output_path =
          _value;
      }
      if ( _index == 13 ) {
        publication_namespace =
          _value;
      }
      if ( _index == 14 ) {
        file_hash =
          _value;
      }
      if ( _index == 15 ) {
        index_start =
          _value;
      }
      if ( _index == 16 ) {
        index_end =
          _value;
      }
      if ( _index == 17 ) {
        checkpoint_file_path =
          _value;
      }
      if ( 17 < _index ) {
	chunks_files_paths.push(
          _value);
      }
      if ( _value == "-h" ||
           _value == "--help" ) {
        _usage(
	  0);
      }
  });
  if ( file_hash == "" ||
       publication_namespace == "" ) {
    _usage(
      1);
  }
}

if ( _cmdline_check(
       "ccget") ) {
  _global_variables();
  _cmdline_parse();
  _overrides_set();
  _config_show();
  app_opts = [
    retries_max,
    api_key_path,
    target_network,
    deployments_dir,
    fs_version,
    rpc_selection,
    contract_address,
    contract_abi_path,
    contract_bytecode_path,
    contract_compiler_output_path,
    publication_namespace,
    file_hash,
    index_start,
    index_end,
    checkpoint_file_path,
    chunks_files_paths,
  ];
  _get.apply(
    null,
    app_opts);
}

module.exports = {
  _ccget:
    _ccget
};
