#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  resolve_date=""
  target_network=""
  network_id=""
  color=""
  quiet=""
}

_requirements() {
  true
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/$( \
    _get \
      "app" \
      "name")"
  echo \
    "${_dir}"
}

_network_setup() {
  local \
    _target_network="${1}" \
    _target_network_id="${2}" \
    _msg=()
  if [[ "${_target_network}" == "gnosis" ]]; then
    _network_id="100"
    _contract_address="0x69470b18f8b8b5f92b48f6199dcb147b4be96571"
  else
    _msg=(
      "No Ethereum Virtual Machine file system"
      "deployed on network '${_target_network}'"
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  if [[ "${_target_network_id}" != "${_network_id}" ]]; then
    _msg=(
      "Requested target network ID"
      "'${_target_network_id}' does"
      "not correspond to '${_target_network}'"
      "known ID '${_network_id}'"
    )
    _msg_error \
      "ID ${_requested}" \
      1
  fi

}

_address_file_user_save() {
  local \
    _network_id="${1}" \
    _address="${2}" \
    _conf_dir \
    _address_file
  _conf_dir="${HOME}/.config/evmfs/${_network_id}"
  _address_file="${_conf_dir}/address"
  if [ ! -e "${_address_file}" ]; then
    mkdir \
      -p \
      "${_conf_dir}"
    echo \
      "${_address}" > \
      "${_address_file}"
    chmod \
      400 \
      "${_address_file}"
  fi
}

_evmfs_address() {
  local \
    _target_network="${1}" \
    _target_network_id="${2}" \
    _args=() \
    _msg=()
  shift \
    2
  _args+=(
    "$@"
  )
  _network_setup \
    "${_target_network}" \
    "${_target_network_id}"
  _address_file_user_save \
    "${_target_network_id}" \
    "${_contract_address}"
  echo \
    "${_contract_address}"
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "resolve" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "target" \
    "network" \
    "gnosis"
  _set_override \
    "network" \
    "id" \
    "100"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Returns an EVM network's file system contract address

Usage:

  $(_get "app" "name")
    [options]

  networks:
    gnosis
    Default: '$(_get "target" "network")'

  options:
     -n <network>         EVM network name ('gnosis').
                          Default: $(_get "target" "network")
     -i <network_id>      EVM network id.
                          Default: $(_get "network" "id")
     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "             Resolve date:   $(_get "resolve" "date")"
  _msg_info "           Target network:   $(_get "target" "network")"
  _msg_info "               Network ID:   $(_get "network" "id")"
}

_globals
_global_variables
_requirements
_config_user_init \
  "$(_get \
       "app" \
       "name")"
# shellcheck disable=SC2034
while \
  getopts \
    'n:i:cvh?' \
    arg; do
  case \
    "${arg}" in
    n) override_target_network="${OPTARG}" ;;
    i) override_network_id="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
_set_overrides
_config_user_init \
  "$( \
    _get \
      "app" \
      "name")"
_show_config
app_opts=(
  "$( \
    _get \
      "target" \
      "network")"
  "$( \
    _get \
      "network" \
      "id")"
)
_evmfs_address \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
