#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="$( \
  realpath \
    "${_bin}/../lib")"
_crash_bash="${_lib}/libcrash-bash/crash-bash"
_libevm="${_lib}/libevm/libevm"
_sourced \
  "${_crash_bash}" 2>/dev/null || \
  source \
    "${_crash_bash}"
_sourced \
  "${_libevm}"

# shellcheck disable=SC2034
_global_variables() {
  get_date=""
  wallet_name=""
  wallet_path=""
  wallet_password=""
  wallet_seed=""
  wallet_address=""
  target_network=""
  api_key=""
  cache_dir=""
  tasks_parallel=""
  call_method=""
  retries_max=""
  fs_address=""
  ll_address=""
  fs_version=""
  deployments_dir=""
  user_level=""
  target_uri=""
  output_file=""
  command_args=()
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    'libevm-requirements' \
    'libevm'
  libevm-requirements
  _check_cmd \
    'evm-contract-call' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-contract-deployment-networks' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-wallet'
  _check_cmd \
    'txt2bin' \
    'encoding-tools'
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/evmfs"
  echo \
    "${_dir}"
}

_network_setup() {
  local \
    _uri_network_id="${1}"
  if [[ "${_uri_network_id}" == "" ]]; then
    _msg=(
      "URI does not specify a network,"
      "assuming user set '${_target_network}'."
    )
    _msg_info \
      "${_msg[*]}"
    _uri_network="${_target_network}"
  elif [[ "${_uri_network_id}" == "100" ]]; then
    _uri_network="100"
  fi
  if [[ "${_uri_network}" != "${_target_network}" ]]; then
    _msg=(
      "URI network '${_uri_network}'"
      "different from user set network"
      "'${_target_network}'"
    )
    _msg_warning \
      "${_msg[*]}"
  fi
  _network_backend="${_uri_network}"
}

_contract_setup() {
  local \
    _contract="${1}" \
    _evmfs_address_opts=()
  if [[ "${_contract}" == "" ]]; then
    _evmfs_address_opts+=(
      -n
        "${_uri_network}"
    )
    _uri_contract="$( \
      evmfs-address \
        "${_evmfs_address_opts[@]}")"
  fi
}

_namespace_setup() {
  local \
    _namespace="${1}"
  if [[ "${_namespace}" == "" ]]; then
    _uri_namespace="$( \
      evm-wallet \
       get \
         "${_wallet_name}" \
         "address")"
  fi
}

_address_section_get() {
  local \
    _uri="${1}" \
    _position="${2}" \
    _path \
    _reversed \
    _hash_reversed
  _path="${_uri#evmfs://}"
  _reversed="$( \
    echo \
      "${_uri}" |
      rev)"
  _section="$( \
    echo \
      "${_reversed}" | \
      cut \
        -d \
          "/" \
        -f \
          "${_position}")"
  echo \
    "${_section}" | \
    rev
}

_hash_get() {
  local \
    _uri="${1}"
  _address_section_get \
    "${_uri}" \
    "1"
}

_namespace_get() {
  local \
    _uri="${1}"
  _address_section_get \
    "${_uri}" \
    "2"
}

_contract_get() {
  local \
    _uri="${1}"
  _address_section_get \
    "${_uri}" \
    "3"
}

_network_id_get() {
  local \
    _uri="${1}"
  _address_section_get \
    "${_uri}" \
    "4"
}

_hash_check() {
  local \
    _hash="${1}" \
    _msg=()
  if [[ "${_hash}" == "" ]]; then
    _msg=(
      "Invalid URI (empty)"
    )
    _msg_error \
      "${_msg[*]}" \
      1
  elif ! [[ "${_hash}"  =~ ^[a-fA-F0-9]{64}$ ]]; then
    _msg=(
      "Hash '${_hash}' is not"
      "a SHA256 checksum." 
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_chunk_get() {
  local \
    _index="${1}" \
    _out="${2}"
  evm-contract-call \
    "${_get_call_opts[@]}" \
    "${_uri_contract}" \
    "readChunk" \
    "${_uri_namespace}" \
    "${_uri_hash}" \
    "${_index}" > \
    "${_out}"
}

_resource_length_get() {
  local \
    _length \
    _locked
  _length=""
  _locked="$( \
    evm-contract-call \
      "${_length_call_opts[@]}" \
      "${_ll_address}" \
      "lock" \
      "${_uri_contract}" \
      "${_uri_namespace}" \
      "${_uri_hash}")"
  if [[ "${_locked}" == "true" ]]; then
    _length="$( \
      evm-contract-call \
        "${_length_call_opts[@]}" \
        "${_ll_address}" \
        "getLength" \
        "${_uri_contract}" \
        "${_uri_namespace}" \
        "${_uri_hash}")"
  fi
  echo \
    "${_length}"
}

_resource_length_mutable_get() {
  local \
    _length
  _length="$( \
    evm-contract-call \
      "${_get_call_opts[@]}" \
      "${_uri_contract}" \
      "getLength" \
      "${_uri_namespace}" \
      "${_uri_hash}")"
  echo \
    "${_length}"
}

_resource_validate() {
  local \
    _check="${1}" \
    _sum \
    _msg=()
  _sum="$( \
    sha256sum \
      "${_check}" | \
      awk \
        '{print $1}')"
  if [[ "${_sum}" != "${_uri_hash}" ]]; then
    _msg=(
      "Error downloading or file"
      "corrupted."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  elif [[ "${_sum}" == "${_uri_hash}" ]]; then
    _msg=(
      "File correctly downloaded."
    )
    _msg_info \
      "${_msg[*]}"
  fi
}

_node_run() {
  local \
    _retries_max="${1}" \
    _cmd="${2}" \
    _args=() \
    _node_path \
    _lib \
    _retry \
    _msg=()
  shift \
    2
  _args=(
    "$@"
  )
  _retry=
  _lib="$( \
    _get_lib)"
  _node_path="${_lib}/node_modules" 
  export \
    NODE_PATH="${_node_path}"
  NODE_PATH="${_node_path}" \
     node \
       "${_cmd}" \
       "${_args[@]}"
  return
  # for _retry \
  #   in $(seq "${_retries_max}"); do
  #   if NODE_PATH="${_node_path}" \
  #      node \
  #        "${_cmd}" \
  #        "${_args[@]}" 2>/dev/null; then
  #     return
  #   else
  #     _msg=(
  #       "contract calling error,"
  #       "retry '${_retry}' out of"
  #       "'${_retries_max}'"
  #     )
  #     _msg_error \
  #       "${_msg[*]}" \
  #       "0"
  #   fi
  # done
  # return \
  #   1
}

_node_network_setup() {
  local \
    _chain="${1}" \
    _chain_name \
    _chain_id \
    _rpc \
    _msg=()
  _msg=(
    "looking for info on EVM blockchain"
    "'${_chain}'"
  )
  _msg_info \
    "${_msg[*]}"
  _chain_id="$( \
    evm-chains-info \
      -o \
        "id" \
      "${_chain}")"
  if [[ "${_chain_id}" != "" ]]; then
    _chain_name="$( \
      evm-chains-info \
        -o \
          "name" \
        "${_chain}" 2>/dev/null || \
        true)"
    _msg=(
      "Found blockchain '${_chain_name}'"
      "with id '${_chain_id}'"
      "Selecting RPC address with"
      "criterion 'kirsh'"
    )
    _msg_info \
      "${_msg[*]}"
    _rpc="$( \
      evm-chains-info \
        -o \
          "rpc" \
        -s \
          "kirsh" \
        "${_chain}")"
  elif [[ "${_chain_id}" == "" ]]; then
    _msg=(
      "Found no known blockchain for input"
      "'${_chain}', interpreting given input"
      "as an rpc address for the selected"
      "network."
    )
    _msg_info \
      "${_msg[*]}"
    _rpc="${_chain}"
  fi
  _msg=(
    "Selected RPC address"
    "'${_rpc}'"
  )
  _msg_info \
    "${_msg[*]}"
  _backend="${_rpc}"
}

_chunk_get_bulk() {
  local \
    _fs_address="${1}" \
    _namespace="${2}" \
    _sum="${3}" \
    _index_start="${4}" \
    _index_end="${5}" \
    _chunks=() \
    _cmd \
    _cmd_args=() \
    _backend
  shift \
    5
  _chunks=(
    "$@"
  )
  _node_network_setup \
    "${_target_network}"
  _cmd="$( \
    _get_lib)/evmfs/get"
  _cmd_args+=(
    "${quiet}"
    "${_retries_max}"
    "${_api_key_path}"
    "${_backend}"
    "${_uri_contract}"
    "${_fs_abi}"
    "${_fs_bytecode}"
    "${_fs_compiler_output}"
    "${_uri_namespace}"
    "${_uri_hash}"
    "${_index_start}"
    "${_index_end}"
    "${_chunks[@]}"
  )
  _node_run \
    "${_retries_max}" \
    "${_cmd}" \
    "${_cmd_args[@]}"
}

_chunks_get_async_bulk() {
  local \
    _length="${1}" \
    _tasks_parallel="${2}" \
    _chunk \
    _piece \
    _index \
    _index_start \
    _index_end \
    _chunk_get_opts=() \
    _pendings=() \
    _bulk_index_amount \
    _bulk_payload \
    _msg=()
  _index=0
  _index_start="${_index}"
  _bulk_payload=()
  _bulk_indexes_amount="$(( \
    _length / _tasks_parallel + 1))"
  _msg_info \
    "bulk async downloading"
  while \
    [ "${_index}" -le "$((_length - 1))" ] && \
    [ "${#_pendings[@]}" -le "${_tasks_parallel}" ]; do
    _piece="${_tmp_dir}/${_uri_hash}.${_index}"
    if (( "${#_bulk_payload[@]}" < "${_bulk_indexes_amount}" )) && \
       [[ "${_index}" != "$((_length - 1))" ]]; then
      _bulk_payload+=(
        "${_piece}"
      )
    elif [[ "${#_bulk_payload[@]}" == "${_bulk_indexes_amount}" ]] || \
         [[ "${_index}" == "$((_length - 1))" ]]; then
      if [[ "${_index}" == "$((_length - 1))" ]]; then
        _bulk_payload+=(
          "${_piece}"
        )
      fi
      _msg=(
        "dumping a bulk payload of '${#_bulk_payload[@]}' items"
        "up to index ${_index}."
      )
      _msg_info \
        "${_msg[*]}"
      _index_end="$(( \
        _index))"
      _chunk_get_opts=(
        "${_uri_contract}"
        "${_uri_namespace}"
        "${_uri_hash}"
        "${_index_start}"
        "${_index_end}"
        "${_bulk_payload[@]}"
      )
      _run \
        "chunk_get_bulk_${_index_start}_${_index_end}" \
        "0" \
        "async" \
        _chunk_get_bulk \
          "${_chunk_get_opts[@]}"
      _pendings+=(
        "$(_get_pid \
             "chunk_get_bulk_${_index_start}_${_index_end}")"
      )
      _bulk_payload=(
        "${_piece}"
      )
      _index_start="$(( \
        _index))"
    fi
    _chunks+=(
      "${_piece}"
    )
    _index="$(( \
      _index + 1 ))"
    if [[ "${#_pendings[@]}" == "${_tasks_parallel}" ]]; then 
      _msg_info \
        "waiting for a task to complete"
      wait \
	-f \
	-p \
	  _job \
        -n \
        "${_pendings[@]}"
      _pendings_new=()
      for _pending in "${_pendings[@]}"; do
        if [[ "${_pending}" != "${_job}" ]]; then
          _pendings_new+=(
            "${_pending}"
          )
        fi
      done
      _pendings=(
        "${_pendings_new[@]}"
      )
      _job=""
    fi
  done
  wait \
    "${_pendings[@]}"
}

_chunks_get_async_standalone() {
  local \
    _length="${1}" \
    _tasks_parallel="${2}" \
    _chunk \
    _piece \
    _index \
    _chunk_get_opts=() \
    _pendings=()
  _index=0
  while \
    [ "${_index}" -le "$(("${_length}" - 1))" ] && \
    [ "${#_pendings[@]}" -le "${_tasks_parallel}" ]; do
    _piece="${_tmp_dir}/${_uri_hash}.${_index}"
    _chunk_get_opts=(
      "${_index}"
      "${_piece}"
    )
    _run \
      "chunk_get_${_index}" \
      "0" \
      "async" \
      _chunk_get \
        "${_chunk_get_opts[@]}"
    _pendings+=(
      "$(_get_pid \
	   "chunk_get_${_index}")"
    )
    _chunks+=(
      "${_piece}"
    )
    _index="$(( \
      _index + 1 ))"
    if [[ "${#_pendings[@]}" == "${_tasks_parallel}" ]]; then 
      wait \
	-f \
	-p \
	  _job \
        -n \
        "${_pendings[@]}"
      _pendings_new=()
      for _pending in "${_pendings[@]}"; do
        if [[ "${_pending}" != "${_job}" ]]; then
          _pendings_new+=(
            "${_pending}"
          )
        fi
      done
      _pendings=(
        "${_pendings_new[@]}"
      )
      _job=""
    fi
  done
  wait \
    "${_pendings[@]}"
}

_chunks_get_sync() {
  local \
    _length="${1}" \
    _tasks_parallel="${2}" \
    _chunk \
    _piece \
    _index=0 \
    _chunk_get_opts=()
  for _chunk \
    in $(seq \
           ${_length}); do
    _msg=(
      "Downloading chunk"
      "'${_chunk}' of '${_length}'"
    )
    _msg_info \
      "${_msg[*]}"
    _index="$(("${_chunk}" - 1))"
    _piece="${_tmp_dir}/${_uri_hash}.${_chunk}"
    _chunk_get_opts=(
      "${_index}"
      "${_piece}"
    )
    _chunk_get \
      "${_chunk_get_opts[@]}"
    _chunks+=(
      "${_piece}"
    )
  done
}

_resource_get() {
  local \
    _call_method="${1}" \
    _tasks_parallel="${2}" \
    _chunks=() \
    _length \
    _file_length \
    _tmp_dir \
    _check \
    _attempt \
    _retries \
    _msg=()
  _retries="4"
  mkdir \
    -p \
    "${_cache_dir}/${_uri_hash}/get"
  _tmp_dir="$( \
    mktemp \
      -d \
      -p \
        "${_cache_dir}/${_uri_hash}")"
  _file_length="$( \
    _resource_length_get)"
  if [[ "${_file_length}" == "" ]]; then
    _file_length="$( \
      _resource_length_mutable_get)"
    _msg=(
      "the file length is not locked,"
      "the uploader could break"
      "the file at a later time, lock"
      "the length in your namespace to"
      "avoid it."
    )
    _msg_warning \
      "${_msg[*]}"
  fi
  _length="$(( \
    _file_length + 1))"
  _attempt=1
  while (( "${_attempt}" < "${_retries}" )); do
    if (( 1 < "${_tasks_parallel}" )) || \
       [[ "${_call_method}" == "bulk" ]]; then
      "_chunks_get_async_${_call_method}" \
        "${_length}" \
        "${_tasks_parallel}"
    elif [[ 1 == "${_tasks_parallel}" ]]; then
      _chunks_get_sync \
        "${_length}" \
        "${_tasks_parallel}"
    else
      _msg=(
        "invalid value for parallel"
        "tasks ('${_tasks_parallel}')"
      )
      _msg_error \
        "${_msg[*]}" \
        1
    fi
    _check="${_tmp_dir}/${_uri_hash}.check"
    _msg_info \
      "got '${#_chunks[@]}' chunks."
    txt2bin \
      "${_check}" \
      "${_chunks[@]}"
    _resource_validate \
      "${_check}"
    mv \
      "${_check}" \
      "${_output_file}"
    break
  done
  _msg=(
    "Output correctly moved onto"
    "'${_output_file}'."
  )
  _msg_info \
    "${_msg[*]}"
}

_evmfs_get() {
  local \
    _fs_address="${1}" \
    _ll_address="${2}" \
    _fs_version="${3}" \
    _deployments_dir="${4}" \
    _wallet_name="${5}" \
    _wallet_path="${6}" \
    _wallet_password="${7}" \
    _wallet_seed="${8}" \
    _target_network="${9}" \
    _api_key_path="${10}" \
    _call_method="${11}" \
    _retries_max="${12}" \
    _tasks_parallel="${13}" \
    _cache_dir="${14}" \
    _target_uri="${15}" \
    _output_file="${16}" \
    _evm_contract_call_opts=() \
    _length_call_opts=() \
    _get_call_opts=() \
    _fs_abi \
    _fs_bytecode \
    _fs_compiler_output \
    _ll_abi \
    _ll_bytecode \
    _ll_compiler_output \
    _network_backend \
    _uri_network \
    _uri_network_id \
    _uri_contract \
    _uri_namespace \
    _uri_hash
  _fs_abi="$( \
    _contract_abi_get \
      "${_deployments_dir}" \
      "${_target_network}" \
      "FileSystem" \
      "${_fs_version}")"
  _fs_bytecode="$( \
    _contract_bytecode_get \
      "${_deployments_dir}" \
      "${_target_network}" \
      "FileSystem" \
      "${_fs_version}")"
  _fs_compiler_output="$( \
    _contract_compiler_output_get \
      "${_deployments_dir}" \
      "${_target_network}" \
      "FileSystem" \
      "${_fs_version}")"
  if [[ "${_fs_version}" == "1.0" ]]; then
    _ll_abi="$( \
      _contract_abi_get \
        "${_deployments_dir}" \
        "${_target_network}" \
        "LengthLock" \
        "${_fs_version}")"
    _ll_bytecode="$( \
      _contract_bytecode_get \
        "${_deployments_dir}" \
        "${_target_network}" \
        "LengthLock" \
        "${_fs_version}")"
    _ll_compiler_output="$( \
      _contract_compiler_output_get \
        "${_deployments_dir}" \
        "${_target_network}" \
        "LengthLock" \
        "${_fs_version}")"
  fi
  _uri_network_id="$( \
    _network_id_get \
      "${_target_uri}")"
  _network_setup \
    "${_uri_network_id}"
  _uri_contract="$( \
    _contract_get \
      "${_target_uri}")"
  _contract_setup \
    "${_uri_contract}"
  _uri_namespace="$( \
    _namespace_get \
      "${_target_uri}")"
  _namespace_setup \
    "${_uri_namespace}"
  _uri_hash="$( \
    _hash_get \
      "${_target_uri}")"
  _hash_check \
    "${_uri_hash}"
  _evm_contract_call_opts+=(
    -n
      "${_uri_network}"
    -t
      "static"
    -k
      "${_api_key_path}"
  )
  _get_call_opts+=(
    "${_evm_contract_call_opts[@]}"
    -A
      "${_fs_abi}"
    -B
      "${_fs_bytecode}"
    -C
      "${_fs_compiler_output}"
  )
  _length_call_opts+=(
    "${_evm_contract_call_opts[@]}"
    -A
      "${_ll_abi}"
    -B
      "${_ll_bytecode}"
    -C
      "${_ll_compiler_output}"
    -r
      "10"
  )
  _resource_get \
    "${_call_method}" \
    "${_tasks_parallel}"
}

_cache_dir_auto_detect() {
  local \
    _cache_dir
  _cache_dir="${HOME}/.cache/evmfs"
  if [[ ! -e "${_cache_dir}" ]]; then
    mkdir \
      -p \
      "${_cache_dir}"
    chmod \
      700 \
      "${_cache_dir}"
  fi
  _set_override \
    "cache" \
    "dir" \
    "${HOME}/.cache/evmfs"
}

_tasks_parallel_auto_detect() {
  local \
    _call_method \
    _tasks_parallel
  _call_method="$( \
    _get \
      "call" \
      "method")"
  if [[ "${_call_method}" == "standalone" ]]; then
    _tasks_parallel=200
  elif [[ "${_call_method}" == "bulk" ]]; then
    _tasks_parallel=1
  fi
  _set_override \
    "tasks" \
    "parallel" \
    "${_tasks_parallel}"
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "get" \
    "date" \
    "$(_get_date_human)"
  _cache_dir_auto_detect
  _set_override \
    "call" \
    "method" \
    "bulk"
  _tasks_parallel_auto_detect
  _set_override \
    "retries" \
    "max" \
    "300"
  _set_override \
    "wallet" \
    "name" \
    "default"
  _set_override \
    "user" \
    "level" \
    "n"
  _deployments_dir_auto_detect \
    "evmfs" \
    "$(_get \
         "user" \
         "level")"
  _network_auto_detect \
    "FileSystem" \
    "$(_get \
         "deployments" \
         "dir")" \
    "$(_get \
         "user" \
         "level")"
  _api_key_auto_detect \
    "$(_get \
         "target" \
         "network")"
  _set_override \
    "wallet" \
    "path" \
    "$(_wallet_path_get \
         "evm-wallet" \
         "$(_get \
              "wallet" \
              "name")")"
  _secret_auto_detect \
    "seed" \
    "seed" \
    "evm-wallet" \
    "$(_get \
         "wallet" \
         "name")"
  _secret_auto_detect \
    "password" \
    "plain" \
    "evm-wallet" \
    "$(_get \
         "wallet" \
         "name")"
  _set_override \
    "wallet" \
    "address" \
    "$(evm-wallet \
         get \
           "$(_get \
                "wallet" \
                "name")" \
           "address")"
  _set_override \
    "output" \
    "file" \
    "$(pwd)/$( \
      _hash_get \
        "${target_uri}")"
  _contract_version_auto_detect \
    "$(_get \
         "deployments" \
         "dir")" \
    "FileSystem" \
    "fs" \
    "$(_get \
         "target" \
         "network")"
  if [[ "${fs_version}" == 1.0 ]]; then
    _contract_address_auto_detect \
      "evmfs" \
      "LengthLock" \
      "ll" \
      "$(_get \
           "target" \
           "network")" \
      "$(_get \
           "fs" \
           "version")" \
      "$(_get \
           "user" \
           "level")" \
      "$(_get \
           "deployments" \
           "dir")"
  fi
  _contract_address_auto_detect \
    "evmfs" \
    "FileSystem" \
    "fs" \
    "$(_get \
         "target" \
         "network")" \
    "$(_get \
         "fs" \
         "version")" \
    "$(_get \
         "user" \
         "level")" \
    "$(_get \
         "deployments" \
         "dir")"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _fs_deployment \
    _networks=() \
    _usage_text
  _fs_deployment="$( \
    _get \
      "deployments" \
      "dir")/FileSystem"
  _networks=( $( \
    evm-contract-deployment-networks \
      -A \
      "${_fs_deployment}")
  )
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Ethereum Virtual Machine file system file downloader

Usage:
  $(_get "app" "name")
    [options]
    <uri>

  networks:
$(_display_networks \
     "${_networks[@]}")

  options:
     -o <output_file>       Name of the file in which to save
                            the downloaded resource.
                            Default: $(_get "output" "file")
     -A <fs_address>        Address of the EVM file system
                            on the network.
                            Default: $(_get "fs" "address")
     -B <ll_address>        Address of the Length Lock contract
                            on the network.
                            Default: $(_get "ll" "address")
     -V <fs_version>        Version of the target EVM file
                            system.
                            Default: $(_get "fs" "version")
     -u                     Whether to retrieve file system
                            address from user directory or custom
                            deployment.
                            Default: $(_get "user" "level")
     -d <deployments_dir>   Contracts deployments directory.
                            Default: $(_get "deployments" "dir")
     -N <wallet_name>       Wallet name.
                            Default: $(_get "wallet" "name")
     -w <wallet_path>       Wallet path.
                            Default: $(_get "wallet" "path")
     -p <wallet_password>   Wallet password.
                            Default: $(_get "wallet" "password")
     -s <wallet_seed>       Wallet seed path.
                            Default: $(_get "wallet" "seed")
     -n <network>           EVM network name ('mainnet', 'gnosis').
                            Default: $(_get "target" "network")
     -k <api_key>           Etherscan-like service key.
                            Default: $(_get "api" "key")
     -m <call_method>       Can be standalone or 'bulk'.
                            Default: $(_get "call" "method")
     -r <retries_max>       Maximum number of retries before
                            failing.
                            Default: $(_get "retries" "max")
     -P <tasks_parallel>    Tasks to perform in parallel.
                            Default: $(_get "tasks" "parallel")
     -C <cache_dir>         Location where to temporary store
                            the downloaded resource chunks.
                            Default: $(_get "cache" "dir")

     -h                     This message.
     -c                     Enable color output
     -v                     Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                 Get date:   $(_get "get" "date")"
  _msg_info "      File system address:   $(_get "fs" "address")"
  _msg_info "      Length Lock address:   $(_get "ll" "address")"
  _msg_info "      File system version:   $(_get "fs" "version")"
  _msg_info "               User level:   $(_get "user" "level")"
  _msg_info "    Deployments directory:   $(_get "deployments" "dir")"
  _msg_info "              Wallet name:   $(_get "wallet" "name")"
  _msg_info "              Wallet path:   $(_get "wallet" "path")"
  _msg_info "          Wallet password:   $(_get "wallet" "password")"
  _msg_info "              Wallet seed:   $(_get "wallet" "seed")"
  _msg_info "           Target network:   $(_get "target" "network")"
  _msg_info "                  API key:   $(_get "api" "key")"
  _msg_info "          Cache directory:   $(_get "cache" "dir")"
  _msg_info "              Call method:   $(_get "call" "method")"
  _msg_info "          Maximum retries:   $(_get "retries" "max")"
  _msg_info "           Parallel tasks:   $(_get "tasks" "parallel")"
  _msg_info "          Target resource:   $(_get "target" "uri")"
  _msg_info "              Output file:   $(_get "output" "file")"
}

_globals
_global_variables
_requirements
_config_user_init \
  "$(_get \
       "app" \
       "name")"
# shellcheck disable=SC2034
while \
  getopts \
    'o:A:B:V:ud:N:w:p:s:n:k:m:r:P:C:cvh?' \
    arg; do
  case \
    "${arg}" in
    o) override_output_file="${OPTARG}" ;;
    A) override_fs_address="${OPTARG}" ;;
    B) override_ll_address="${OPTARG}" ;;
    V) override_fs_version="${OPTARG}" ;;
    u) override_user_level="y" ;;
    d) override_deployments_dir="${OPTARG}" ;;
    N) override_wallet_name="${OPTARG}" ;;
    w) override_wallet_path="${OPTARG}" ;;
    p) override_wallet_password="${OPTARG}" ;;
    s) override_wallet_seed="${OPTARG}" ;;
    n) override_target_network="${OPTARG}" ;;
    k) override_api_key="${OPTARG}" ;;
    m) override_call_method="${OPTARG}" ;;
    r) override_retries_max="${OPTARG}" ;;
    P) override_tasks_parallel="${OPTARG}" ;;
    C) override_cache_dir="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( $# < 1 )); then
  _msg_error \
    "no URI given" \
    0
  _set_overrides
  _usage \
    1
fi
if (( 0 < $# )); then
  _set \
    "target" \
    "uri" \
    "${1}"
fi
_set_overrides
_show_config
app_opts=(
  "$( \
    _get \
      "fs" \
      "address")"
  "$( \
    _get \
      "ll" \
      "address")"
  "$( \
    _get \
      "fs" \
      "version")"
  "$(_get \
       "deployments" \
       "dir")"
  "$( \
    _get \
      "wallet" \
      "name")"
  "$( \
    _get \
      "wallet" \
      "path")"
  "$( \
    _get \
      "wallet" \
      "password")"
  "$( \
    _get \
      "wallet" \
      "seed")"
  "$( \
    _get \
      "target" \
      "network")"
  "$( \
    _get \
      "api" \
      "key")"
  "$( \
    _get \
      "call" \
      "method")"
  "$( \
    _get \
      "retries" \
      "max")"
  "$( \
    _get \
      "tasks" \
      "parallel")"
  "$( \
    _get \
      "cache" \
      "dir")"
  "$( \
    _get \
      "target" \
      "uri")"
  "$( \
    _get \
      "output" \
      "file")"
)
_evmfs_get \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
