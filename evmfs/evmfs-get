#!/usr/bin/env bash

# SPDX-License-Identifier: AGPL-3.0-or-later

#    ----------------------------------------------------------------------
#    Copyright Â© 2024, 2025  Pellegrino Prevete
#
#    All rights reserved
#    ----------------------------------------------------------------------
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="$( \
  realpath \
    "${_bin}/../lib")"
_crash_bash="${_lib}/libcrash-bash/crash-bash"
_libevm="${_lib}/libevm/libevm"
_sourced \
  "${_crash_bash}" 2>/dev/null || \
  source \
    "${_crash_bash}"
_sourced \
  "${_libevm}"

# shellcheck disable=SC2034
_global_variables() {
  get_date=""
  _libevm_global_variables
  _libevm_app_global_variables
  cache_dir=""
  tasks_parallel=""
  call_method=""
  ccfs_address=""
  fs_address=""
  ll_address=""
  fs_version=""
  uris_amount=""
  target_uris=()
  output_files=()
  command_args=()
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    'libevm-requirements' \
    'libevm'
  libevm-requirements
  _check_cmd \
    'evm-contract-call' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-contract-deployment-networks' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-wallet'
  _check_cmd \
    'txt2bin' \
    'encoding-tools'
  _check_cmd \
    'node-run'
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/evmfs"
  echo \
    "${_dir}"
}

_network_setup() {
  local \
    _uri_network_id="${1}"
  if [[ "${_uri_network_id}" == "" ]]; then
    _msg=(
      "URI does not specify a network,"
      "assuming user set '${_target_networks[0]}'."
    )
    _msg_info \
      "${_msg[*]}"
    _uri_network_id="${_target_networks[0]}"
  elif [[ "${_uri_network_id}" == "100" ]]; then
    _uri_network_id="100"
  fi
  if [[ "${_uri_network_id}" != "${_target_networks[0]}" ]]; then
    _msg=(
      "URI network '${_uri_network_id}'"
      "different from user set network"
      "'${_target_networks[0]}'."
    )
    _msg_warning \
      "${_msg[*]}"
  fi
  # This variable seems never used.
  _network_backend="${_uri_network_id}"
}

_contract_type_get() {
  local \
    _contract_address="${1}" \
    _contract_address_lower \
    _address \
    _address_lower \
    _fs_addresses=() \
    _ccfs_addresses=() \
    _evm_contract_deployment_address_opts=() \
    _type_fs \
    _type_ccfs
    _msg=()
  _contract_type=""
  _type_fs="false"
  _type_ccfs="false"
  _evm_contract_deployment_address_opts+=(
    -a
      "evmfs"
  )
  if [[ "${_uri_network_id}" != "" ]]; then
    _evm_contract_deployment_address_opts+=(
      -i
        "${_uri_network_id}"
    )
  fi
  _fs_addresses+=( $( \
    evm-contract-deployment-address \
      "${_evm_contract_deployment_address_opts[@]}" \
      "FileSystem")
  )
  _ccfs_addresses+=( $( \
    evm-contract-deployment-address \
      "${_evm_contract_deployment_address_opts[@]}" \
      "CrossChainFileSystem")
  )
  _contract_address_lower="$( \
    _lower \
      "${_contract_address}")"
  for _address in \
    "${_fs_addresses[@]}"; do
    _address_lower="$( \
      _lower \
        "${_address}")"
    if [[ "${_contract_address_lower}" == \
          "${_address_lower}" ]]; then
      _type_fs="true"
      _contract_type="fs"
      break
    fi
  done
  for _address in \
    "${_ccfs_addresses[@]}"; do
    _address_lower="$( \
      _lower \
        "${_address}")"
    if [[ "${_contract_address_lower}" == \
          "${_address_lower}" ]]; then
      _type_ccfs="true"
      _contract_type="ccfs"
      break
    fi
  done
  if [[ "${_type_fs}" == "true" && \
        "${_type_ccfs}" == "true" ]]; then
    _msg=(
      "Since network has not been specified,"
      "it has been found that the given"
      "contract address"
      "is valid for both a FileSystem"
      "and a CrossChainFileSystem."
      "Assuming the URI points to"
      "the latter."
    )
    _msg_warning \
      "${_msg[*]}"
  fi
  if [[ "${_contract_type}" == "" ]]; then
    _msg=(
      "Contract address not found"
      "among local deployments,"
      "assuming it's for a cross-chain"
      "file system."
    )
    _msg_warning \
      "${_msg[*]}"
    _contract_type="ccfs"
  fi
}

_contract_setup() {
  local \
    _contract_address="${1}" \
    _evmfs_address_opts=() \
    _contract_type
  if [[ "${_contract_address}" == "" ]]; then
    _evmfs_address_opts+=(
      -n
        "${_uri_network_id}"
    )
    # TODO: not implemented,
    #       but really this would just be
    #       a composition of
    #       'evm-contract-deployment-something's
    #       if a check isn't implemented.
    _uri_contract_address="$( \
      evmfs-address \
        "${_evmfs_address_opts[@]}")"
  elif [[ "${_contract_address}" != "" ]]; then
    _contract_type_get \
      "${_contract_address}"
    _uri_contract_type="${_contract_type}"
  fi
}

_namespace_setup() {
  local \
    _namespace="${1}"
  if [[ "${_namespace}" == "" ]]; then
    _uri_namespace="$( \
      evm-wallet \
       get \
         "${_wallet_name}" \
         "address")"
  fi
}

_address_section_get() {
  local \
    _uri="${1}" \
    _position="${2}" \
    _path \
    _reversed \
    _hash_reversed
  _path="${_uri#evmfs://}"
  _reversed="$( \
    echo \
      "${_uri}" |
      rev)"
  _section="$( \
    echo \
      "${_reversed}" | \
      cut \
        -d \
          "/" \
        -f \
          "${_position}")"
  echo \
    "${_section}" | \
    rev
}

_hash_get() {
  local \
    _uri="${1}"
  _address_section_get \
    "${_uri}" \
    "1"
}

_namespace_get() {
  local \
    _uri="${1}" \
    _namespace
  _namespace="$( \
    _address_section_get \
      "${_uri}" \
      "2")"
  _lower \
    "${_namespace}"
}

_contract_get() {
  local \
    _uri="${1}" \
    _address
  _address="$( \
    _address_section_get \
      "${_uri}" \
      "3")"
  _lower \
    "${_address}"
}

_network_id_get() {
  local \
    _uri="${1}"
  _address_section_get \
    "${_uri}" \
    "4"
}

_hash_check() {
  local \
    _hash="${1}" \
    _msg=()
  if [[ "${_hash}" == "" ]]; then
    _msg=(
      "Invalid URI (empty)."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  elif ! [[ "${_hash}"  =~ ^[a-fA-F0-9]{64}$ ]]; then
    _msg=(
      "Hash '${_hash}' is not"
      "a SHA256 checksum." 
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_chunk_get() {
  local \
    _index="${1}" \
    _out="${2}"
  evm-contract-call \
    "${_get_call_opts[@]}" \
    "${_uri_contract}" \
    "readChunk" \
    "${_uri_namespace}" \
    "${_uri_hash}" \
    "${_index}" > \
    "${_out}"
}

_resource_length_get() {
  local \
    _length \
    _locked
  _length=""
  _locked="$( \
    evm-contract-call \
      "${_length_call_opts[@]}" \
      "${_ll_address}" \
      "lock" \
      "${_uri_contract}" \
      "${_uri_namespace}" \
      "${_uri_hash}")"
  if [[ "${_locked}" == "true" ]]; then
    _length="$( \
      evm-contract-call \
        "${_length_call_opts[@]}" \
        "${_ll_address}" \
        "getLength" \
        "${_uri_contract}" \
        "${_uri_namespace}" \
        "${_uri_hash}")"
  fi
  echo \
    "${_length}"
}

_resource_length_mutable_get() {
  local \
    _length
  _length="$( \
    evm-contract-call \
      "${_get_call_opts[@]}" \
      "${_uri_contract}" \
      "getLength" \
      "${_uri_namespace}" \
      "${_uri_hash}")"
  echo \
    "${_length}"
}

_resource_validate() {
  local \
    _check="${1}" \
    _sum \
    _msg=()
  _msg=(
    "Validating integrity of merged file."
  )
  _msg_info \
    "${_msg[*]}"
  _sum="$( \
    sha256sum \
      "${_check}" | \
      awk \
        '{print $1}')"
  if [[ "${_sum}" != "${_uri_hash}" ]]; then
    _msg=(
      "Error downloading or file"
      "corrupted."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  elif [[ "${_sum}" == "${_uri_hash}" ]]; then
    _msg=(
      "File correctly downloaded."
    )
    _msg_info \
      "${_msg[*]}"
  fi
}

_checkpoint_get() {
  local \
    _checkpoint_file_path="${1}" \
    _msg=()
  if [[ -e "${_checkpoint_file_path}" ]]; then
    _checkpoint="$( \
      cat \
        "${_checkpoint_file_path}")"
    _msg=(
      "Checkpoint is '${_checkpoint}'."
    )
    _msg_info \
      "${_msg[*]}"
    _run_once="true"
  else
    _msg=(
      "Checkpoint file does not exist."
      "Setting checkpoint to '${_index_start}'."
    )
    _msg_info \
      "${_msg[*]}"
    _checkpoint="${_index_start}"
    _run_once="false"
  fi
}

_chunks_ccget_bulk() {
  local \
    _ccfs_address="${1}" \
    _namespace="${2}" \
    _sum="${3}" \
    _index_start="${4}" \
    _index_end="${5}" \
    _chunks=() \
    _ccget \
    _ccget_args=() \
    _rpc_backend \
    _rpc_selection \
    _node_run_opts=() \
    _checkpoint_get_file_path \
    _chunks_total_run \
    _ccfs_abi \
    _ccfs_bytecode \
    _ccfs_compiler_output \
    _run_once
  shift \
    5
  _chunks=(
    "$@"
  )
  _contract_artifacts_auto_detect \
    "${_deployments_dir}" \
    "${_uri_network_id}" \
    "CrossChainFileSystem" \
    "_ccfs" \
    "${_fs_version}"
  _rpc_selection="kirsh"
  _node_run_opts+=(
    -r
      "${_retries_max}"
  )
  _checkpoint_get_file_path="${_tmp_dir}/checkpoint.get"
  _chunks_total_run="$(( \
    "${_index_end}" - "${_index_start}" + 1))"
  _msg=(
    "Getting '${_chunks_total_run}'"
    "chunks from '${_index_start}'"
    "to '${_index_end}'."
  )
  _msg_info \
    "${_msg[*]}"
  _rpc_backend_get \
    "${_uri_network_id}"
  _ccget="$( \
    _get_lib)/evmfs/ccget"
  while true; do
    _checkpoint_get \
      "${_checkpoint_get_file_path}"
    if [[ "${_checkpoint}" == "${_index_end}" && \
          "${_run_once}" == "true" ]]; then
      _msg=(
        "All '${_chunks_total_run}' chunks retrieved."
      )
      _msg_info \
        "${_msg[*]}"
      rm \
        -rf \
        "${_checkpoint_get_file_path}"
      break
    fi
    _msg_info \
      "Preparing node arguments."
    _ccget_args=(
      "${quiet}"
      "${_retries_max}"
      "${_api_key_path}"
      "${_rpc_backend}"
      "${_deployments_dir}"
      "${_fs_version}"
      "${_rpc_selection}"
      "${_uri_contract}"
      "${_ccfs_abi}"
      "${_ccfs_bytecode}"
      "${_ccfs_compiler_output}"
      "${_uri_namespace}"
      "${_uri_hash}"
      "${_index_start}"
      "${_index_end}"
      "${_checkpoint_get_file_path}"
      "${_chunks[@]}"
    )
    _msg_info \
      "Running node."
    node-run \
      "${_node_run_opts[@]}" \
      "${_ccget}" \
      "${_ccget_args[@]}"
  done
}


_chunks_get_bulk() {
  local \
    _fs_address="${1}" \
    _namespace="${2}" \
    _sum="${3}" \
    _index_start="${4}" \
    _index_end="${5}" \
    _chunks=() \
    _get \
    _get_args=() \
    _rpc_backend \
    _node_run_opts=() \
    _checkpoint_get_file_path \
    _chunks_total_run \
    _run_once
  shift \
    5
  _chunks=(
    "$@"
  )
  _node_run_opts+=(
    -r
      "${_retries_max}"
  )
  _checkpoint_get_file_path="${_tmp_dir}/checkpoint.get"
  _chunks_total_run="$(( \
    "${_index_end}" - "${_index_start}" + 1))"
  _msg=(
    "Getting '${_chunks_total_run}'"
    "chunks from '${_index_start}'"
    "to '${_index_end}'."
  )
  _msg_info \
    "${_msg[*]}"
  _rpc_backend_get \
    "${_uri_network_id}"
  _get="$( \
    _get_lib)/evmfs/get"
  while true; do
    _checkpoint_get \
      "${_checkpoint_get_file_path}"
    if [[ "${_checkpoint}" == "${_index_end}" && \
          "${_run_once}" == "true" ]]; then
      _msg=(
        "All '${_chunks_total_run}' chunks retrieved."
      )
      _msg_info \
        "${_msg[*]}"
      rm \
        -rf \
        "${_checkpoint_get_file_path}"
      break
    fi
    _msg_info \
      "Preparing node arguments."
    _get_args=(
      "${quiet}"
      "${_retries_max}"
      "${_api_key_path}"
      "${_rpc_backend}"
      "${_uri_contract}"
      "${_fs_abi}"
      "${_fs_bytecode}"
      "${_fs_compiler_output}"
      "${_uri_namespace}"
      "${_uri_hash}"
      "${_index_start}"
      "${_index_end}"
      "${_checkpoint_get_file_path}"
      "${_chunks[@]}"
    )
    _msg_info \
      "Running node."
    node-run \
      "${_node_run_opts[@]}" \
      "${_get}" \
      "${_get_args[@]}"
  done
}

_chunks_get_async_bulk() {
  local \
    _length="${1}" \
    _tasks_parallel="${2}" \
    _chunk \
    _piece \
    _index \
    _index_start \
    _index_end \
    _chunks_get_opts=() \
    _pendings=() \
    _bulk_index_amount \
    _bulk_payload \
    _msg=() \
    _get_type
  if [[ "${_uri_contract_type}" == "fs" ]]; then
    _get_type="get"
  elif [[ "${_uri_contract_type}" == "ccfs" ]]; then
    _get_type="ccget"
  fi
  _index=0
  _index_start="${_index}"
  _bulk_payload=()
  _bulk_indexes_amount="$(( \
    _length / _tasks_parallel + 1))"
  _msg_info \
    "Bulk async download."
  while \
    [ "${_index}" -le "$((_length - 1))" ] && \
    [ "${#_pendings[@]}" -le "${_tasks_parallel}" ]; do
    _piece="${_tmp_dir}/${_uri_hash}.${_index}"
    if (( "${#_bulk_payload[@]}" < "${_bulk_indexes_amount}" )) && \
       [[ "${_index}" != "$((_length - 1))" ]]; then
      _bulk_payload+=(
        "${_piece}"
      )
    elif [[ "${#_bulk_payload[@]}" == "${_bulk_indexes_amount}" ]] || \
         [[ "${_index}" == "$((_length - 1))" ]]; then
      if [[ "${_index}" == "$((_length - 1))" ]]; then
        _bulk_payload+=(
          "${_piece}"
        )
      fi
      _msg=(
        "Dumping a bulk payload of '${#_bulk_payload[@]}' items"
        "up to index ${_index}."
      )
      _msg_info \
        "${_msg[*]}"
      _index_end="$(( \
        _index))"
      _chunks_get_opts=(
        "${_uri_contract}"
        "${_uri_namespace}"
        "${_uri_hash}"
        "${_index_start}"
        "${_index_end}"
        "${_bulk_payload[@]}"
      )
      _run \
        "chunks_${_get_type}_bulk_${_index_start}_${_index_end}" \
        "0" \
        "async" \
        "_chunks_${_get_type}_bulk" \
          "${_chunks_get_opts[@]}"
      _pendings+=(
        "$(_get_pid \
             "chunks_${_get_type}_bulk_${_index_start}_${_index_end}")"
      )
      _bulk_payload=(
        "${_piece}"
      )
      _index_start="$(( \
        _index))"
    fi
    _chunks+=(
      "${_piece}"
    )
    _index="$(( \
      _index + 1 ))"
    if [[ "${#_pendings[@]}" == "${_tasks_parallel}" ]]; then 
      _msg_info \
        "Waiting for a task to complete."
      wait \
	-f \
	-p \
	  _job \
        -n \
        "${_pendings[@]}"
      _pendings_new=()
      for _pending in "${_pendings[@]}"; do
        if [[ "${_pending}" != "${_job}" ]]; then
          _pendings_new+=(
            "${_pending}"
          )
        fi
      done
      _pendings=(
        "${_pendings_new[@]}"
      )
      _job=""
    fi
  done
  wait \
    "${_pendings[@]}"
}

_chunks_get_async_standalone() {
  local \
    _length="${1}" \
    _tasks_parallel="${2}" \
    _chunk \
    _piece \
    _index \
    _chunk_get_opts=() \
    _pendings=()
  _index=0
  while \
    [ "${_index}" -le "$(("${_length}" - 1))" ] && \
    [ "${#_pendings[@]}" -le "${_tasks_parallel}" ]; do
    _piece="${_tmp_dir}/${_uri_hash}.${_index}"
    _chunk_get_opts=(
      "${_index}"
      "${_piece}"
    )
    _run \
      "chunk_get_${_index}" \
      "0" \
      "async" \
      _chunk_get \
        "${_chunk_get_opts[@]}"
    _pendings+=(
      "$(_get_pid \
	   "chunk_get_${_index}")"
    )
    _chunks+=(
      "${_piece}"
    )
    _index="$(( \
      _index + 1 ))"
    if [[ "${#_pendings[@]}" == "${_tasks_parallel}" ]]; then 
      wait \
	-f \
	-p \
	  _job \
        -n \
        "${_pendings[@]}"
      _pendings_new=()
      for _pending in "${_pendings[@]}"; do
        if [[ "${_pending}" != "${_job}" ]]; then
          _pendings_new+=(
            "${_pending}"
          )
        fi
      done
      _pendings=(
        "${_pendings_new[@]}"
      )
      _job=""
    fi
  done
  wait \
    "${_pendings[@]}"
}

_chunks_get_sync() {
  local \
    _length="${1}" \
    _tasks_parallel="${2}" \
    _chunk \
    _piece \
    _index=0 \
    _chunk_get_opts=()
  for _chunk \
    in $(seq \
           ${_length}); do
    _msg=(
      "Downloading chunk"
      "'${_chunk}' of '${_length}'."
    )
    _msg_info \
      "${_msg[*]}"
    _index="$(("${_chunk}" - 1))"
    _piece="${_tmp_dir}/${_uri_hash}.${_chunk}"
    _chunk_get_opts=(
      "${_index}"
      "${_piece}"
    )
    _chunk_get \
      "${_chunk_get_opts[@]}"
    _chunks+=(
      "${_piece}"
    )
  done
}

_chunks_total_get() {
  local \
    _resource_length \
    _ll_abi \
    _ll_bytecode \
    _ll_compiler_output \
    _length_call_opts=()
  _ll_address=""
  _contract_address_auto_detect \
    "evmfs" \
    "LengthLock" \
    "_ll" \
    "${_uri_network_id}" \
    "${_fs_version}" \
    "${_user_level}" \
    "${_deployments_dir}"
  _contract_artifacts_auto_detect \
    "${_deployments_dir}" \
    "${_uri_network_id}" \
    "LengthLock" \
    "_ll" \
    "${_fs_version}"
  _length_call_opts+=(
    "${_evm_contract_call_opts[@]}"
    -A
      "${_ll_abi}"
    -B
      "${_ll_bytecode}"
    -C
      "${_ll_compiler_output}"
    -r
      "${_retries_max}"
  )
  _resource_length="$( \
    _resource_length_get)"
  if [[ "${_resource_length}" == "" ]]; then
    _resource_length="$( \
      _resource_length_mutable_get)"
    _msg=(
      "The file length is not locked,"
      "the uploader could break"
      "the file at a later time, lock"
      "the length in your namespace to"
      "avoid it."
    )
    _msg_warning \
      "${_msg[*]}"
  fi
  _chunks_total="$(( \
    _resource_length + 1))"
}

_resource_get() {
  local \
    _call_method="${1}" \
    _tasks_parallel="${2}" \
    _max_retries="${3}" \
    _chunks=() \
    _evm_contract_call_opts=() \
    _get_call_opts=() \
    _fs_abi \
    _fs_bytecode \
    _fs_compiler_output \
    _chunks_total \
    _tmp_dir \
    _check \
    _attempt \
    _retries \
    _msg=()
  mkdir \
    -p \
    "${_cache_dir}/${_uri_hash}/get"
  _tmp_dir="$( \
    mktemp \
      -d \
      -p \
        "${_cache_dir}/${_uri_hash}")"
  _evm_contract_call_opts+=(
    -n
      "${_uri_network_id}"
    -t
      "static"
    -k
      "${_api_key_path}"
  )
  if [[ "${_uri_contract_type}" == "fs" ]]; then
    _contract_artifacts_auto_detect \
      "${_deployments_dir}" \
      "${_uri_network_id}" \
      "FileSystem" \
      "_fs" \
      "${_fs_version}"
    _get_call_opts+=(
      "${_evm_contract_call_opts[@]}"
      -A
        "${_fs_abi}"
      -B
        "${_fs_bytecode}"
      -C
        "${_fs_compiler_output}"
    )
  fi
  if [[ "${_fs_version}" == "1.0" ]]; then
    _chunks_total_get
  fi
  _attempt=1
  while (( "${_attempt}" < "${_retries_max}" )); do
    if (( 1 < "${_tasks_parallel}" )) || \
       [[ "${_call_method}" == "bulk" ]]; then
      "_chunks_get_async_${_call_method}" \
        "${_chunks_total}" \
        "${_tasks_parallel}"
    elif [[ 1 == "${_tasks_parallel}" ]]; then
      _chunks_get_sync \
        "${_chunks_total}" \
        "${_tasks_parallel}"
    else
      _msg=(
        "Invalid value for parallel"
        "tasks ('${_tasks_parallel}')."
      )
      _msg_error \
        "${_msg[*]}" \
        1
    fi
    _check="${_tmp_dir}/${_uri_hash}.check"
    _msg=(
      "Got '${#_chunks[@]}' chunks. Merging."
    )
    _msg_info \
      "${_msg[*]}"
    txt2bin \
      "${_check}" \
      "${_chunks[@]}"
    _resource_validate \
      "${_check}"
    mv \
      "${_check}" \
      "${_output_file}"
    break
  done
  _msg=(
    "Output correctly moved onto"
    "'${_output_file}'."
  )
  _msg_info \
    "${_msg[*]}"
}

_evmfs_get() {
  local \
    _fs_address="${1}" \
    _ll_address="${2}" \
    _ccfs_address="${3}" \
    _fs_version="${4}" \
    _deployments_dir="${5}" \
    _user_level="${6}" \
    _wallet_name="${7}" \
    _wallet_path="${8}" \
    _wallet_password="${9}" \
    _wallet_seed="${10}" \
    _networks_amount="${11}" \
    _api_key_path="${12}" \
    _call_method="${13}" \
    _retries_max="${14}" \
    _tasks_parallel="${15}" \
    _cache_dir="${16}" \
    _uris_amount="${17}" \
    _target_network \
    _target_networks=() \
    _cursor \
    _target_uri \
    _target_uris=() \
    _output_file \
    _output_files=() \
    _network_backend \
    _uri_network \
    _uri_network_id \
    _uri_contract \
    _uri_contract_type \
    _uri_namespace \
    _uri_hash
  shift \
    17
  for _target_network \
    in $(seq "${_networks_amount}"); do
    _target_networks+=(
      "${1}"
    )
    shift
  done
  for _target_uri \
    in $(seq "${_uris_amount}"); do
    _target_uris+=(
      "${1}"
    )
    shift
  done
  for _output_file \
    in $(seq "${_uris_amount}"); do
    _output_files+=(
      "${1}"
    )
    shift
  done
  for _cursor \
    in $(seq 0 \
             "$((${_uris_amount} - 1))"); do
    _target_uri="${_target_uris["${_cursor}"]}"
    _output_file="${_output_files["${_cursor}"]}"
    _uri_network_id="$( \
      _network_id_get \
        "${_target_uri}")"
    _network_setup \
      "${_uri_network_id}"
    _uri_contract="$( \
      _contract_get \
        "${_target_uri}")"
    _contract_setup \
      "${_uri_contract}"
    _uri_namespace="$( \
      _namespace_get \
        "${_target_uri}")"
    _namespace_setup \
      "${_uri_namespace}"
    _uri_hash="$( \
      _hash_get \
        "${_target_uri}")"
    _hash_check \
      "${_uri_hash}"
    _resource_get \
      "${_call_method}" \
      "${_tasks_parallel}" \
      "${_retries_max}"
  done
  return \
    0
}

_cache_dir_auto_detect() {
  local \
    _cache_dir
  _cache_dir="${HOME}/.cache/evmfs"
  if [[ ! -e "${_cache_dir}" ]]; then
    mkdir \
      -p \
      "${_cache_dir}"
    chmod \
      700 \
      "${_cache_dir}"
  fi
  _set_override \
    "cache" \
    "dir" \
    "${HOME}/.cache/evmfs"
}

_tasks_parallel_auto_detect() {
  local \
    _call_method \
    _tasks_parallel
  _call_method="${call_method}"
  if [[ "${_call_method}" == "standalone" ]]; then
    _tasks_parallel=200
  elif [[ "${_call_method}" == "bulk" ]]; then
    _tasks_parallel=1
  fi
  _set_override \
    "tasks" \
    "parallel" \
    "${_tasks_parallel}"
}

_output_files_check() {
  local \
    _msg=() \
    _file \
    _dir \
    _output_files_amount \
    _uri
  _output_files_amount="${#output_files[@]}"
  if [[ "${uris_amount}" != "${_output_files_amount}" ]]; then
    if (( 0 < "${_output_files_amount}" )); then
      _msg=(
        "The amount of input URIs is not"
        "the same as the specified amount"
        "of output files."
      )
      _msg_error \
        "${_msg[*]}" \
        1
    elif [[ "${_output_files_amount}" == 0 ]]; then
      _msg=(
        "No output files paths specified,"
        "the URIs will be downloaded in the current"
        "directory named same as their hashes."
      )
      _msg_warning \
        "${_msg[*]}"
      for _uri in "${target_uris[@]}"; do
        output_files+=(
          "$(pwd)/$( \
            _hash_get \
              "${_uri}")"
        )
      done
    fi
  elif [[ "${uris_amount}" == "${_output_files_amount}" ]]; then
    for _file in "${output_files[@]}"; do
      _dir="$( \
        dirname \
          "${_file}")"
      if [[ ! -d "${_dir}" ]]; then
        _msg=(
          "The parent directory for"
          "output file '${_file}'"
          "does not exist."
        )
        _msg_error \
          "${_msg[*]}" \
          1
      fi
    done
  fi
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "get" \
    "date" \
    "$(_get_date_human)"
  networks_amount="${#target_networks[@]}"
  uris_amount="${#target_uris[@]}"
  _output_files_check
  _cache_dir_auto_detect
  _set_override \
    "call" \
    "method" \
    "bulk"
  _tasks_parallel_auto_detect
  _set_override \
    "retries" \
    "max" \
    "300"
  _set_override \
    "call" \
    "timeout" \
    "10000"
  _set_override \
    "user" \
    "level" \
    "n"
  _set_override \
    "call" \
    "auth" \
    "n"
  _deployments_dir_auto_detect \
    "evmfs" \
    "${user_level}"
  if (( "${networks_amount}" < 1 )); then
    _network_auto_detect \
      "FileSystem" \
      "${deployments_dir}" \
      "${user_level}"
    target_networks+=(
      "${target_network}"
    )
    target_network=""
    networks_amount="${#target_networks[@]}"
  fi
  if [[ "${networks_amount}" == 1 ]]; then
    _api_key_auto_detect \
      "${target_networks[0]}"
  fi 
  _wallet_overrides_set \
    "evm-wallet" \
    "default" \
    "n"
  _contract_version_auto_detect \
    "${deployments_dir}" \
    "FileSystem" \
    "fs" \
    "${target_networks[0]}"
  if [[ "${fs_version}" == 1.0 ]]; then
    _contract_address_auto_detect \
      "evmfs" \
      "LengthLock" \
      "ll" \
      "${target_networks[0]}" \
      "${fs_version}" \
      "${user_level}" \
      "${deployments_dir}"
  fi
  _contract_address_auto_detect \
    "evmfs" \
    "FileSystem" \
    "fs" \
    "${target_networks[0]}" \
    "${fs_version}" \
    "${user_level}" \
    "${deployments_dir}"
  _contract_address_auto_detect \
    "evmfs" \
    "CrossChainFileSystem" \
    "ccfs" \
    "${target_networks[0]}" \
    "${fs_version}" \
    "${user_level}" \
    "${deployments_dir}"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _fs_deployment \
    _networks=() \
    _usage_text
  _fs_deployment="${deployments_dir}/FileSystem"
  _networks=( $( \
    evm-contract-deployment-networks \
      -A \
      "${_fs_deployment}")
  )
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Ethereum Virtual Machine file system file downloader

Usage:
  ${app_name}
    [options]
    <uri>

  networks:
$(_display_networks \
     "${_networks[@]}")

  options:
     -o <output_file>       Name of the file in which to save
                            the downloaded resource.
                            Default: ${output_file}
     -m <call_method>       Can be standalone or 'bulk'.
                            Default: ${call_method}
     -r <retries_max>       Maximum number of retries before
                            failing.
                            Default: ${retries_max}
     -T <call_timeout>      Maximum number of milliseconds before
                            declaring the call failed.
                            Default: ${call_timeout}
     -P <tasks_parallel>    Tasks to perform in parallel.
                            Default: ${tasks_parallel}

  contract options:
     -A <fs_address>        Address of the EVM file system
                            on the network.
                            Default: ${fs_address}
     -B <ll_address>        Address of the Length Lock contract
                            on the network.
                            Default: ${ll_address}
     -C <ccfs_address>      Address of the CrossChainFileSystem
                            contract on the network.
                            Default: ${ccfs_address}
     -V <fs_version>        Version of the target EVM file
                            system.
                            Default: ${fs_version}

  libevm options:
     -u                     Whether to retrieve file system
                            address from user directory or custom
                            deployment.
                            Default: ${user_level}
     -d <deployments_dir>   Contracts deployments directory.
                            Default: ${deployments_dir}
     -n <network>           EVM network name (${_networks[*]}).
                            Default: ${target_network}

  credentials options:
     -N <wallet_name>       Wallet name.
                            Default: ${wallet_name}
     -w <wallet_path>       Wallet path.
                            Default: ${wallet_path}
     -p <wallet_password>   Wallet password.
                            Default: ${wallet_password}
     -s <wallet_seed>       Wallet seed path.
                            Default: ${wallet_seed}
     -k <api_key>           Etherscan-like service key.
                            Default: ${api_key}

  applications options:
     -W <cache_dir>         Location where to temporary store
                            the downloaded resource chunks.
                            Default: ${cache_dir}

     -h                     This message.
     -c                     Enable color output
     -v                     Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                       Get date:   ${get_date}"
  _msg_info "               Target resources:"
  _display_target_uris                         "${uris_amount}"
  _msg_info "                    Call method:   ${call_method}"
  _msg_info "                Maximum retries:   ${retries_max}"
  _msg_info "                 Parallel tasks:   ${tasks_parallel}"
  _msg_info " (not implemented) Call timeout:   ${call_timeout}"
  _msg_info "       Contract configuration:"
  _msg_info "Cross-chain File System address:   ${ccfs_address}"
  _msg_info "            File system address:   ${fs_address}"
  _msg_info "            Length Lock address:   ${ll_address}"
  _msg_info "            File system version:   ${fs_version}"
  _msg_info "         LibEVM configuration:"
  _msg_info "                     User level:   ${user_level}"
  _msg_info "          Deployments directory:   ${deployments_dir}"
  _msg_info "                Target networks:   ${target_networks[*]}"
  _msg_info "     Credentials configuration:"
  _msg_info "                    Wallet name:   ${wallet_name}"
  _msg_info "                    Wallet path:   ${wallet_path}"
  _msg_info "                Wallet password:   ${wallet_password}"
  _msg_info "                    Wallet seed:   ${wallet_seed}"
  _msg_info "                        API key:   ${api_key}"
  _msg_info "    Application configuration:"
  _msg_info "                Cache directory:   ${cache_dir}"
}

_display_target_uris() {
  local \
    _uris_amount="${1}" \
    _cursor \
    _uris=() \
    _target_uri \
    _output_file
  _uris=( $( \
    seq 0 \
        "$(("${_uris_amount}" - 1))")
  )
  for _cursor in "${_uris[@]}"; do
    _target_uri="${target_uris["${_cursor}"]}"
    _output_file="${output_files["${_cursor}"]}"
    _msg_info "                            URI:   ${_target_uri}"
    _msg_info "                    Output file:   ${_output_file}"
  done
}

_globals
_global_variables
_requirements
_config_user_init \
  "${app_name}"
# shellcheck disable=SC2034
getopts_opts="$( \
  printf \
    "%s" \
    "o:m:r:P:T:" \
    "A:B:C:V:" \
    "$(_libevm_app_getopts_params_get)" \
    "n:" \
    "$(_wallet_getopts_params_get)" \
    "W:cvh?")"
while \
  getopts \
    "${getopts_opts}" \
    arg; do
  _wallet_getopts_case
  _libevm_app_getopts_case
  case \
    "${arg}" in
    o) output_files+=(
         "${OPTARG}"
       ) ;;
    m) override_call_method="${OPTARG}" ;;
    r) override_retries_max="${OPTARG}" ;;
    P) override_tasks_parallel="${OPTARG}" ;;
    T) override_call_timeout="${OPTARG}" ;;
    A) override_fs_address="${OPTARG}" ;;
    B) override_ll_address="${OPTARG}" ;;
    C) override_ccfs_address="${OPTARG}" ;;
    V) override_fs_version="${OPTARG}" ;;
    n) target_networks+=(
         "${OPTARG}"
       ) ;;
    W) override_cache_dir="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'." \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( $# < 1 )); then
  _msg_error \
    "No URI given." \
    0
  _set_overrides
  _usage \
    1
fi
for _uri in "$@"; do
  if [[ "${_uri}" != "evmfs://"* ]]; then
    _msg=(
      "Input URI '${_uri}' is not an EVMFS URI."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  target_uris+=(
    "${_uri}"
  )
done
_set_overrides
_show_config
app_opts=(
  "${fs_address}"
  "${ll_address}"
  "${ccfs_address}"
  "${fs_version}"
  "${deployments_dir}"
  "${user_level}"
  "${wallet_name}"
  "${wallet_path}"
  "${wallet_password}"
  "${wallet_seed}"
  "${networks_amount}"
  "${api_key}"
  "${call_method}"
  "${retries_max}"
  "${tasks_parallel}"
  "${cache_dir}"
  "${uris_amount}"
  "${target_networks[@]}"
  "${target_uris[@]}"
  "${output_files[@]}"
)
_evmfs_get \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
