#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  get_date=""
  wallet_name=""
  wallet_path=""
  wallet_password=""
  wallet_seed=""
  target_network=""
  api_key=""
  cache_dir=""
  target_contract=""
  target_resource=""
  output_file=""
  command_args=()
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    'evm-contract-call' \
    'evm-contracts-tools'
  _check_cmd \
    'txt2bin' \
    'encoding-tools'
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/$( \
    _get \
      "app" \
      "name")"
  echo \
    "${_dir}"
}

_network_setup() {
  local \
    _uri_network_id="${1}"
  if [[ "${_uri_network_id}" == "" ]]; then
    _msg=(
      "URI does not specify a network,"
      "assuming user set '${_target_network}'."
    )
    _msg_info \
      "${_msg[*]}"
    _uri_network="${_target_network}"
  elif [[ "${_uri_network_id}" == "100" ]]; then
    _uri_network="gnosis"
  fi
  if [[ "${_uri_network}" != "${_target_network}" ]]; then
    _msg=(
      "URI network '${_uri_network}'"
      "different from user set network"
      "'${_target_network}'"
    )
    _msg_warning \
      "${_msg[*]}"
  fi
  if [[ "${_uri_network}" == "gnosis" ]]; then
    _rpc="https://rpc.gnosischain.com"
    _network_backend="${_uri_network}"
  elif [[ "${_uri_network}" == "ethereum" ]]; then
    _network_backend="etherscan"
  else
    _network_backend="${_uri_network}"
  fi
}

_contract_setup() {
  local \
    _contract="${1}" \
    _evmfs_address_opts=()
  if [[ "${_contract}" == "" ]]; then
    _evmfs_address_opts+=(
      -n
        "${_uri_network}"
    )
    _uri_contract="$( \
      evmfs-address \
        "${_evmfs_address_opts[@]}")"
  fi
}

_namespace_setup() {
  local \
    _namespace="${1}"
  if [[ "${_namespace}" == "" ]]; then
    _uri_namespace="$( \
      evm-wallet \
       get \
         "${_wallet_name}" \
         "address")"
  fi
}

_address_section_get() {
  local \
    _uri="${1}" \
    _position="${2}" \
    _path \
    _reversed \
    _hash_reversed
  _path="${_uri#evmfs://}"
  _reversed="$( \
    echo \
      "${_uri}" |
      rev)"
  _section="$( \
    echo \
      "${_reversed}" | \
      cut \
        -d \
          "/" \
        -f \
          "${_position}")"
  echo \
    "${_section}" | \
    rev
}

_hash_get() {
  local \
    _uri="${1}"
  _address_section_get \
    "${_uri}" \
    "1"
}

_namespace_get() {
  local \
    _uri="${1}"
  _address_section_get \
    "${_uri}" \
    "2"
}

_contract_get() {
  local \
    _uri="${1}"
  _address_section_get \
    "${_uri}" \
    "3"
}

_network_id_get() {
  local \
    _uri="${1}"
  _address_section_get \
    "${_uri}" \
    "4"
}

_hash_check() {
  local \
    _hash="${1}" \
    _msg=()
  if [[ "${_hash}" == "" ]]; then
    _msg=(
      "Invalid URI (empty)"
    )
    _msg_error \
      "${_msg[*]}" \
      1
  elif ! [[ "${_hash}"  =~ ^[a-fA-F0-9]{64}$ ]]; then
    _msg=(
      "Hash '${_hash}' is not"
      "a SHA256 checksum." 
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_chunk_get() {
  local \
    _chunk="${1}"
  evm-contract-call \
    "${_call_opts[@]}" \
    "${_uri_contract}" \
    "readChunk" \
    "${_uri_namespace}" \
    "${_uri_hash}" \
    "${_chunk}"
}

_resource_length_get() {
  evm-contract-call \
    "${_call_opts[@]}" \
    "${_uri_contract}" \
    "getLength" \
    "${_uri_namespace}" \
    "${_uri_hash}"
}

_resource_validate() {
  local \
    _check="${1}" \
    _sum \
    _msg=()
  _sum="$( \
    sha256sum \
      "${_check}" \
      awk \
        '{print $1}')"
  if [[ "${_sum}" != "${_uri_hash}" ]]; then
    _msg=(
      "Error downloading or file"
      "corrupted."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_resource_get() {
  local \
    _chunks=() \
    _length \
    _chunk \
    _piece \
    _tmp_dir \
    _check \
    _attempt \
    _retries
  _retries="4"
  _tmp_dir="$( \
    mktemp \
      -d \
      -p \
        "${_cache_dir}")"
  _length="$(( \
    "$(_resource_length_get)" + 1))"
  _attempt=1
  while (( "${_attempt}" < "${_retries}" )); do
    for _chunk \
      in $(seq \
             ${_length}); do
      _piece="${_tmp_dir}/${_uri_hash}.${_chunk}"
      _chunks+=(
        "${_piece}"
      )
      _chunk_get \
        "$(("${_chunk}" - 1))" > \
        "${_piece}"
    done
    _check="${_tmp_dir}/${_uri_hash}.check"
    txt2bin \
      "${_check}" \
      "${_chunks[@]}"
    _resource_validate \
      "${_check}"
    mv \
      "${_check}" \
      "${_output_file}"
    break
  done
}

_evmfs_get() {
  local \
    _wallet_name="${1}" \
    _wallet_path="${2}" \
    _wallet_password="${3}" \
    _wallet_seed="${4}" \
    _target_network="${5}" \
    _api_key_path="${6}" \
    _cache_dir="${7}" \
    _target_contract="${8}" \
    _target_uri="${9}" \
    _output_file="${10}" \
    _call_opts=() \
    _network_backend \
    _uri_network \
    _uri_network_id \
    _uri_contract \
    _uri_namespace \
    _uri_hash
  _uri_network_id="$( \
    _network_id_get \
      "${_target_uri}")"
  _network_setup \
    "${_uri_network_id}"
  _uri_contract="$( \
    _contract_get \
      "${_target_uri}")"
  _contract_setup \
    "${_uri_contract}"
  _uri_namespace="$( \
    _namespace_get \
      "${_target_uri}")"
  _namespace_setup \
    "${_uri_namespace}"
  _uri_hash="$( \
    _hash_get \
      "${_target_uri}")"
  _hash_check \
    "${_uri_hash}"
  _call_opts+=(
    -n
      "${_uri_network}"
    -t
      "static"
    -k
      "${_api_key_path}"
  )
  _resource_get
}

_wallet_path_get() {
  local \
    _path \
    _name
  _name="$( \
    _get \
      "wallet" \
      "name")"
  _path="$( \
    _get_conf_dir_path)/${_name}.dat"
  echo \
    "${_path}"
}

_secret_get() {
  local \
    _secret="${1}" \
    _path \
    _name
  _name="$( \
    _get \
      "wallet" \
      "name")"
  _path="$( \
    _get_conf_dir_path)/${_name}-${_secret}.txt"
  echo \
    "${_path}"
}

_api_key_get() {
  local \
    _name="${1}" \
    _network="${2}" \
    _conf_dir \
    _service
  if [[ "${_network}" == "ethereum" ]]; then
    _service="etherscan"
  elif [[ "${_network}" == "gnosis" ]]; then
    _service="gnosisscan"
  fi
  _conf_dir="${HOME}/.config/${_service}"
  mkdir \
    -p \
    "${_conf_dir}"
  echo \
    "${_conf_dir}/${_name}.txt"
}

_secret_auto_detect() {
  local \
    _secret="${1}" \
    _secret_type="${2}" \
    _dir \
    _key_gen_opts=() \
    _msg=()
  _path="$( \
    _secret_get \
      "${_secret}")"
  _dir="$( \
    dirname \
      "${_path}")"
  if [[ ! -e "${_path}" ]]; then
    if [[ "${quiet}" == "n" ]]; then
      _key_gen_opts+=(
        -v
      )
    fi
    _key_gen_opts+=(
      -t
        "${_secret_type}"
    )
    _msg=(
      "generating ${_secret} '${_path}'"
    )
    _msg_info \
      "${_msg[*]}"
    mkdir \
      -p \
      "${_dir}"
    chmod \
      700 \
      "${_dir}"
    key-gen \
      "${_key_gen_opts[@]}" \
      "${_path}"
    _msg=(
      "${_secret} '${_path}' successfully generated"
    )
    _msg_info \
      "${_msg[*]}"
  fi
  _set_override \
    "wallet" \
    "${_secret}" \
    "${_path}"
}

_cache_dir_auto_detect() {
  local \
    _cache_dir
  _cache_dir="${HOME}/.cache/evmfs"
  if [[ ! -e "${_cache_dir}" ]]; then
    mkdir \
      -p \
      "${_cache_dir}"
    chmod \
      700 \
      "${_cache_dir}"
  fi
  _set_override \
    "cache" \
    "dir" \
    "${HOME}/.cache/evmfs"
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "get" \
    "date" \
    "$(_get_date_human)"
  _cache_dir_auto_detect
  _set_override \
    "wallet" \
    "name" \
    "default"
  _set_override \
    "target" \
    "network" \
    "gnosis"
  _set_override \
    "api" \
    "key" \
    "$(_api_key_get \
         "default" \
         "$(_get \
              "target" \
              "network")")"
  _set_override \
    "wallet" \
    "path" \
    "$(_wallet_path_get)"
  _secret_auto_detect \
    "seed" \
    "seed"
  _secret_auto_detect \
    "password" \
    "plain"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Ethereum Virtual Machine file system file downloader

Usage:
  $(_get "app" "name")
    [options]
    <resource>

  networks:
    alchemy
    ankr
    cloudflare
    chainstack
    etherscan
    gnosis
    infura
    publicPolygon
    quicknode

  options:
     -o <output_file>     Name of the file in which to save
                          the downloaded resource.
                          Default: $(_get "output" "file")
     -N <wallet_name>     Wallet name.
                          Default: $(_get "wallet" "name")
     -w <wallet_path>     Wallet path.
                          Default: $(_get "wallet" "path")
     -p <wallet_password> Wallet password.
                          Default: $(_get "wallet" "password")
     -s <wallet_seed>     Wallet seed path.
                          Default: $(_get "wallet" "seed")
     -n <network>         EVM network name ('mainnet', 'gnosis').
                          Default: $(_get "target" "network")
     -k <api_key>         Etherscan-like service key.
                          Default: $(_get "api" "key")
     -C <cache_dir>       Location where to temporary store
                          the downloaded resource chunks.
                          Default: $(_get "cache" "dir")

     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                 Get date:   $(_get "get" "date")"
  _msg_info "              Wallet name:   $(_get "wallet" "name")"
  _msg_info "              Wallet path:   $(_get "wallet" "path")"
  _msg_info "          Wallet password:   $(_get "wallet" "password")"
  _msg_info "              Wallet seed:   $(_get "wallet" "seed")"
  _msg_info "           Target network:   $(_get "target" "network")"
  _msg_info "                  API key:   $(_get "api" "key")"
  _msg_info "          Cache directory:   $(_get "cache" "dir")"
  _msg_info "          Target contract:   $(_get "target" "contract")"
  _msg_info "          Target resource:   $(_get "target" "resource")"
  _msg_info "              Output file:   $(_get "output" "file")"
}

_globals
_global_variables
_requirements
_config_user_init \
  "$(_get \
       "app" \
       "name")"
# shellcheck disable=SC2034
while \
  getopts \
    'o:N:w:p:s:n:k:a:C:cvh?' \
    arg; do
  case \
    "${arg}" in
    o) override_output_file="${OPTARG}" ;;
    N) override_wallet_name="${OPTARG}" ;;
    w) override_wallet_path="${OPTARG}" ;;
    p) override_wallet_password="${OPTARG}" ;;
    s) override_wallet_seed="${OPTARG}" ;;
    n) override_target_network="${OPTARG}" ;;
    k) override_api_key="${OPTARG}" ;;
    a) override_target_contract="${OPTARG}" ;;
    C) override_cache_dir="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( 0 < $# )); then
  _set \
    "target" \
    "resource" \
    "${1}"
fi
_set_overrides
_config_user_init \
  "$( \
    _get \
      "app" \
      "name")"
_show_config
app_opts=(
  "$( \
    _get \
      "wallet" \
      "name")"
  "$( \
    _get \
      "wallet" \
      "path")"
  "$( \
    _get \
      "wallet" \
      "password")"
  "$( \
    _get \
      "wallet" \
      "seed")"
  "$( \
    _get \
      "target" \
      "network")"
  "$( \
    _get \
      "api" \
      "key")"
  "$( \
    _get \
      "cache" \
      "dir")"
  "$( \
    _get \
      "target" \
      "contract")"
  "$( \
    _get \
      "target" \
      "resource")"
  "$( \
    _get \
      "output" \
      "file")"
)
_evmfs_get \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
