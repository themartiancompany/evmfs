#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  get_date=""
  wallet_name=""
  wallet_path=""
  wallet_password=""
  wallet_seed=""
  target_network=""
  api_key=""
  cache_dir=""
  fs_address=""
  fs_version=""
  deployments_dir=""
  user_level=""
  target_uri=""
  output_file=""
  command_args=()
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    'evm-chains-explorers'
  _check_cmd \
    'evm-chains-info'
  _check_cmd \
    'evm-contract-call' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-contract-deployment-address' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-contract-deployment-versions' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-contract-deployments-dir' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-wallet'
  _check_cmd \
    'txt2bin' \
    'encoding-tools'
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/evmfs"
  echo \
    "${_dir}"
}

_network_setup() {
  local \
    _uri_network_id="${1}"
  if [[ "${_uri_network_id}" == "" ]]; then
    _msg=(
      "URI does not specify a network,"
      "assuming user set '${_target_network}'."
    )
    _msg_info \
      "${_msg[*]}"
    _uri_network="${_target_network}"
  elif [[ "${_uri_network_id}" == "100" ]]; then
    _uri_network="100"
  fi
  if [[ "${_uri_network}" != "${_target_network}" ]]; then
    _msg=(
      "URI network '${_uri_network}'"
      "different from user set network"
      "'${_target_network}'"
    )
    _msg_warning \
      "${_msg[*]}"
  fi
  _network_backend="${_uri_network}"
}

_contract_setup() {
  local \
    _contract="${1}" \
    _evmfs_address_opts=()
  if [[ "${_contract}" == "" ]]; then
    _evmfs_address_opts+=(
      -n
        "${_uri_network}"
    )
    _uri_contract="$( \
      evmfs-address \
        "${_evmfs_address_opts[@]}")"
  fi
}

_namespace_setup() {
  local \
    _namespace="${1}"
  if [[ "${_namespace}" == "" ]]; then
    _uri_namespace="$( \
      evm-wallet \
       get \
         "${_wallet_name}" \
         "address")"
  fi
}

_address_section_get() {
  local \
    _uri="${1}" \
    _position="${2}" \
    _path \
    _reversed \
    _hash_reversed
  _path="${_uri#evmfs://}"
  _reversed="$( \
    echo \
      "${_uri}" |
      rev)"
  _section="$( \
    echo \
      "${_reversed}" | \
      cut \
        -d \
          "/" \
        -f \
          "${_position}")"
  echo \
    "${_section}" | \
    rev
}

_hash_get() {
  local \
    _uri="${1}"
  _address_section_get \
    "${_uri}" \
    "1"
}

_namespace_get() {
  local \
    _uri="${1}"
  _address_section_get \
    "${_uri}" \
    "2"
}

_contract_get() {
  local \
    _uri="${1}"
  _address_section_get \
    "${_uri}" \
    "3"
}

_network_id_get() {
  local \
    _uri="${1}"
  _address_section_get \
    "${_uri}" \
    "4"
}

_hash_check() {
  local \
    _hash="${1}" \
    _msg=()
  if [[ "${_hash}" == "" ]]; then
    _msg=(
      "Invalid URI (empty)"
    )
    _msg_error \
      "${_msg[*]}" \
      1
  elif ! [[ "${_hash}"  =~ ^[a-fA-F0-9]{64}$ ]]; then
    _msg=(
      "Hash '${_hash}' is not"
      "a SHA256 checksum." 
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_chunk_get() {
  local \
    _chunk="${1}"
  evm-contract-call \
    "${_call_opts[@]}" \
    "${_uri_contract}" \
    "readChunk" \
    "${_uri_namespace}" \
    "${_uri_hash}" \
    "${_chunk}"
}

_resource_length_get() {
  local \
    _length
  _length="$( \
    evm-contract-call \
      "${_call_opts[@]}" \
      "${_uri_contract}" \
      "getLength" \
      "${_uri_namespace}" \
      "${_uri_hash}")"
  echo \
    "${_length}"
}

_resource_validate() {
  local \
    _check="${1}" \
    _sum \
    _msg=()
  _sum="$( \
    sha256sum \
      "${_check}" | \
      awk \
        '{print $1}')"
  if [[ "${_sum}" != "${_uri_hash}" ]]; then
    _msg=(
      "Error downloading or file"
      "corrupted."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  elif [[ "${_sum}" == "${_uri_hash}" ]]; then
    _msg=(
      "File correctly downloaded."
    )
    _msg_info \
      "${_msg[*]}"
  fi
}

_resource_get() {
  local \
    _chunks=() \
    _length \
    _chunk \
    _piece \
    _tmp_dir \
    _check \
    _attempt \
    _retries \
    _msg=()
  _retries="4"
  mkdir \
    -p \
    "${_cache_dir}/${_uri_hash}/get"
  _tmp_dir="$( \
    mktemp \
      -d \
      -p \
        "${_cache_dir}/${_uri_hash}")"
  _length="$(( \
    "$(_resource_length_get)" + 1))"
  _attempt=1
  while (( "${_attempt}" < "${_retries}" )); do
    for _chunk \
      in $(seq \
             ${_length}); do
      _msg=(
        "Downloading chunk"
        "'${_chunk}' of '${_length}'"
      )
      _msg_info \
        "${_msg[*]}"
      _piece="${_tmp_dir}/${_uri_hash}.${_chunk}"
      _chunks+=(
        "${_piece}"
      )
      _chunk_get \
        "$(("${_chunk}" - 1))" > \
        "${_piece}"
    done
    _check="${_tmp_dir}/${_uri_hash}.check"
    txt2bin \
      "${_check}" \
      "${_chunks[@]}"
    _resource_validate \
      "${_check}"
    mv \
      "${_check}" \
      "${_output_file}"
    break
  done
  _msg=(
    "Output correctly moved onto"
    "'${_output_file}'."
  )
  _msg_info \
    "${_msg[*]}"
}

_abi_get() {
  local \
    _deployments="${1}" \
    _network="${2}" \
    _name="${3}" \
    _version="${4}"
  echo \
    "${_deployments}/${_name}/${_network}/${_version}/${_name}.abi.json"
}

_bytecode_get() {
  local \
    _deployments="${1}" \
    _network="${2}" \
    _name="${3}" \
    _version="${4}"
  echo \
    "${_deployments}/${_name}/${_network}/${_version}/${_name}.bin"
}

_compiler_output_get() {
  local \
    _deployments="${1}" \
    _network="${2}" \
    _name="${3}" \
    _version="${4}"
  echo \
    "${_deployments}/${_name}/${_network}/${_version}/${_name}.json"
}

_evmfs_get() {
  local \
    _fs_address="${1}" \
    _fs_version="${2}" \
    _deployments_dir="${3}" \
    _wallet_name="${4}" \
    _wallet_path="${5}" \
    _wallet_password="${6}" \
    _wallet_seed="${7}" \
    _target_network="${8}" \
    _api_key_path="${9}" \
    _cache_dir="${10}" \
    _target_uri="${11}" \
    _output_file="${12}" \
    _call_opts=() \
    _fs_abi \
    _fs_bytecode \
    _fs_compiler_output \
    _network_backend \
    _uri_network \
    _uri_network_id \
    _uri_contract \
    _uri_namespace \
    _uri_hash
  _fs_abi="$( \
    _abi_get \
      "${_deployments_dir}" \
      "${_target_network}" \
      "FileSystem" \
      "${_fs_version}")"
  _fs_bytecode="$( \
    _bytecode_get \
      "${_deployments_dir}" \
      "${_target_network}" \
      "FileSystem" \
      "${_fs_version}")"
  _fs_compiler_output="$( \
    _compiler_output_get \
      "${_deployments_dir}" \
      "${_target_network}" \
      "FileSystem" \
      "${_fs_version}")"
  _uri_network_id="$( \
    _network_id_get \
      "${_target_uri}")"
  _network_setup \
    "${_uri_network_id}"
  _uri_contract="$( \
    _contract_get \
      "${_target_uri}")"
  _contract_setup \
    "${_uri_contract}"
  _uri_namespace="$( \
    _namespace_get \
      "${_target_uri}")"
  _namespace_setup \
    "${_uri_namespace}"
  _uri_hash="$( \
    _hash_get \
      "${_target_uri}")"
  _hash_check \
    "${_uri_hash}"
  _call_opts+=(
    -A
      "${_fs_abi}"
    -B
      "${_fs_bytecode}"
    -C
      "${_fs_compiler_output}"
    -n
      "${_uri_network}"
    -t
      "static"
    -k
      "${_api_key_path}"
  )
  _resource_get
}

_wallet_path_get() {
  local \
    _path \
    _name
  _name="$( \
    _get \
      "wallet" \
      "name")"
  _path="${HOME}/.config/evm-wallet/${_name}.dat"
  echo \
    "${_path}"
}

_secret_get() {
  local \
    _secret="${1}" \
    _path \
    _name
  _name="$( \
    _get \
      "wallet" \
      "name")"
  _path="${HOME}/.config/evm-wallet/${_name}-${_secret}.txt"
  echo \
    "${_path}"
}

_api_key_auto_detect() {
  local \
    _chain="${1}" \
    _chain_name \
    _key \
    _msg=()
  _key="$( \
    evm-chains-explorers \
      -c \
        "${_chain}" \
      -s \
        'kirsh' \
      get \
        keys)"
  _chain_name="$( \
    evm-chains-info \
      -o \
        "name" \
      "${_chain}")"
  if [[ ! -e "${_key}" ]]; then
    _msg=(
      "Found no provider services"
      "keys for chain '${_chain_name}'."
      "Check available service"
      "providers with \"evm-chains-info"
      "-o explorers '${_chain}'\""
      "and add the relative api key in"
      "'<user_home>/.config/evm-chains-explorers/<service>/default.txt'"
    )
    _msg_info \
      "${_msg[*]}"
  fi
  _set_override \
    "api" \
    "key" \
    "${_key}"
}

_secret_auto_detect() {
  local \
    _secret="${1}" \
    _secret_type="${2}" \
    _dir \
    _key_gen_opts=() \
    _msg=()
  _path="$( \
    _secret_get \
      "${_secret}")"
  _dir="$( \
    dirname \
      "${_path}")"
  if [[ ! -e "${_path}" ]]; then
    if [[ "${quiet}" == "n" ]]; then
      _key_gen_opts+=(
        -v
      )
    fi
    _key_gen_opts+=(
      -t
        "${_secret_type}"
    )
    _msg=(
      "generating ${_secret} '${_path}'"
    )
    _msg_info \
      "${_msg[*]}"
    mkdir \
      -p \
      "${_dir}"
    chmod \
      700 \
      "${_dir}"
    key-gen \
      "${_key_gen_opts[@]}" \
      "${_path}"
    _msg=(
      "${_secret} '${_path}' successfully generated"
    )
    _msg_info \
      "${_msg[*]}"
  fi
  _set_override \
    "wallet" \
    "${_secret}" \
    "${_path}"
}

_deployments_dir_auto_detect() {
  local \
    _user_level \
    _evm_contract_deployments_dir_opts=() \
    _deployments_dir \
    _system_deployments
  _user_level="$( \
    _get \
      "user" \
      "level")"
  if [[ "${_user_level}" == "y" ]]; then
    _evm_contract_deployments_dir_opts+=(
      -u
    )
  fi
  _deployments_dir="$( \
    evm-contract-deployments-dir \
      "${_evm_contract_deployments_dir_opts[@]}" \
      "evmfs")"
  if [[ ! -d "${_deployments_dir}" ]]; then
    _system_deployments="$( \
     evm-contract-deployments-dir \
       "evmfs")"
    _msg=(
      "user deployments directory"
      "'${_deployments_dir}' does"
      "not exists, importing system deployments"
      "directory '${_system_deployments}'"
    )
    _msg_info \
      "${_msg[*]}"
    mkdir \
      -p \
      "${_deployments_dir}"
    chmod \
      700 \
      "${_deployments_dir}"
    cp \
     -r \
     "${_system_deployments}/"* \
     "${_deployments_dir}"
  fi
  _set_override \
    "deployments" \
    "dir" \
    "${_deployments_dir}"
}

_cache_dir_auto_detect() {
  local \
    _cache_dir
  _cache_dir="${HOME}/.cache/evmfs"
  if [[ ! -e "${_cache_dir}" ]]; then
    mkdir \
      -p \
      "${_cache_dir}"
    chmod \
      700 \
      "${_cache_dir}"
  fi
  _set_override \
    "cache" \
    "dir" \
    "${HOME}/.cache/evmfs"
}

_network_auto_detect() {
  local \
    _contract \
    _contract_deployment \
    _deployments \
    _user \
    _msg=()
  _contract="FileSystem"
  _deployments="$( \
    _get \
      "deployments" \
      "dir")"
  _contract_deployment="${_deployments}/${_contract}"
  _user="$( \
    _get \
      "user" \
      "level")"
  if [[ "${_user}" == "y" ]]; then
    _msg=(
     "User deployments enabled, looking"
     "for cheapest network deployments at" 
     "path '${_contract_deployment}'"
   )
   _msg_info \
     "${_msg[*]}"
  fi
  _network="$( \
    evm-contract-deployment-networks \
      -C \
      "${_contract_deployment}")"
  if [[ "${_user}" == "y" ]]; then
    _msg=(
      "Found network '${_network}'"
    )
    _msg_info \
      "${_msg[*]}"
  fi
  _set_override \
    "target" \
    "network" \
    "${_network}"
}

_fs_version_auto_detect() {
  local \
    _config \
    _deployments \
    _network \
    _version
  _deployments="$( \
    _get \
      "deployments" \
      "dir")"
  _network="$( \
    _get \
      "target" \
      "network")"
  _config="${_deployments}/FileSystem/${_network}/config.sh"
  _version="$( \
    evm-contract-deployment-versions \
      -H \
      "${_config}")"
  _set_override \
    "fs" \
    "version" \
    "${_version}"
}

_fs_address_auto_detect() {
  local \
    _address \
    _network \
    _deployments \
    _user \
    _version \
    _evm_contract_deployment_address_opts=() \
    _msg=()
  _network="$( \
    _get \
      "target" \
      "network")"
  _evm_contract_deployment_address_opts+=(
    -n
      "${_network}"
  )
  _version="$( \
    _get \
      "fs" \
      "version")"
  if [[ "${_version}" != "" ]]; then
    _evm_contract_deployment_address_opts+=(
      -V
        "${_version}"
    )
  fi
  _user="$( \
    _get \
      "user" \
      "level")"
  if [[ "${_user}" == "n" ]]; then
    _evm_contract_deployment_address_opts+=(
      -a
        "evmfs"
    )
  elif [[ "${_user}" == "y" ]]; then
    _deployments="$( \
      _get \
        "deployments" \
        "dir")"
    _evm_contract_deployment_address_opts+=(
      -u
      -d
        "${_deployments}" 
    )
  fi
  _address="$( \
    evm-contract-deployment-address \
      "${_evm_contract_deployment_address_opts[@]}" \
      "FileSystem")"
  if [[ "${_address}" == "" ]]; then
    _msg=(
      "error getting FileSystem version"
      "${_version} deployment address"
      "for network '${_network}'"
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  _set_override \
    "fs" \
    "address" \
    "${_address}"
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "get" \
    "date" \
    "$(_get_date_human)"
  _cache_dir_auto_detect
  _set_override \
    "wallet" \
    "name" \
    "default"
  _set_override \
    "user" \
    "level" \
    "n"
  _deployments_dir_auto_detect
  _network_auto_detect
  _api_key_auto_detect \
    "$(_get \
         "target" \
         "network")"
  _set_override \
    "wallet" \
    "path" \
    "$(_wallet_path_get)"
  _secret_auto_detect \
    "seed" \
    "seed"
  _secret_auto_detect \
    "password" \
    "plain"
  _set_override \
    "output" \
    "file" \
    "$(pwd)/$( \
      _hash_get \
        "${target_uri}")"
  _fs_version_auto_detect
  _fs_address_auto_detect
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _fs_deployment \
    _networks \
    _usage_text
  _fs_deployment="$( \
    _get \
      "deployments" \
      "dir")/FileSystem"
  _networks="$( \
    evm-contract-deployment-networks \
      -A \
      "${_fs_deployment}")"
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Ethereum Virtual Machine file system file downloader

Usage:
  $(_get "app" "name")
    [options]
    <uri>

  networks:
$(_display_networks \
     "${_networks[*]}")

  options:
     -o <output_file>       Name of the file in which to save
                            the downloaded resource.
                            Default: $(_get "output" "file")
     -A <fs_address>        Address of the EVM file system
                            on the network.
                            Default: $(_get "fs" "address")
     -V <fs_version>        Version of the target EVM file
                            system.
                            Default: $(_get "fs" "version")
     -u                     Whether to retrieve file system
                            address from user directory or custom
                            deployment.
                            Default: $(_get "user" "level")
     -d <deployments_dir>   Contracts deployments directory.
                            Default: $(_get "deployments" "dir")
     -N <wallet_name>       Wallet name.
                            Default: $(_get "wallet" "name")
     -w <wallet_path>       Wallet path.
                            Default: $(_get "wallet" "path")
     -p <wallet_password>   Wallet password.
                            Default: $(_get "wallet" "password")
     -s <wallet_seed>       Wallet seed path.
                            Default: $(_get "wallet" "seed")
     -n <network>           EVM network name ('mainnet', 'gnosis').
                            Default: $(_get "target" "network")
     -k <api_key>           Etherscan-like service key.
                            Default: $(_get "api" "key")
     -C <cache_dir>         Location where to temporary store
                            the downloaded resource chunks.
                            Default: $(_get "cache" "dir")

     -h                     This message.
     -c                     Enable color output
     -v                     Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

_display_networks() {
  local \
    _network \
    _network_name \
    _networks=(
      "${1}"
    )
  for _network \
    in "${_networks[@]}"; do
    _network_name="$( \
      evm-chains-info \
        -i \
          "id" \
        -o \
          "name" \
        "${_network}")"
  echo \
    "    ${_network_name}"
  done
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                 Get date:   $(_get "get" "date")"
  _msg_info "      File system address:   $(_get "fs" "address")"
  _msg_info "      File system version:   $(_get "fs" "version")"
  _msg_info "               User level:   $(_get "user" "level")"
  _msg_info "    Deployments directory:   $(_get "deployments" "dir")"
  _msg_info "              Wallet name:   $(_get "wallet" "name")"
  _msg_info "              Wallet path:   $(_get "wallet" "path")"
  _msg_info "          Wallet password:   $(_get "wallet" "password")"
  _msg_info "              Wallet seed:   $(_get "wallet" "seed")"
  _msg_info "           Target network:   $(_get "target" "network")"
  _msg_info "                  API key:   $(_get "api" "key")"
  _msg_info "          Cache directory:   $(_get "cache" "dir")"
  _msg_info "          Target resource:   $(_get "target" "uri")"
  _msg_info "              Output file:   $(_get "output" "file")"
}

_globals
_global_variables
_requirements
_config_user_init \
  "$(_get \
       "app" \
       "name")"
# shellcheck disable=SC2034
while \
  getopts \
    'o:A:V:ud:N:w:p:s:n:k:a:C:cvh?' \
    arg; do
  case \
    "${arg}" in
    o) override_output_file="${OPTARG}" ;;
    A) override_fs_address="${OPTARG}" ;;
    V) override_fs_version="${OPTARG}" ;;
    u) override_user_level="y" ;;
    d) override_deployments_dir="${OPTARG}" ;;
    N) override_wallet_name="${OPTARG}" ;;
    w) override_wallet_path="${OPTARG}" ;;
    p) override_wallet_password="${OPTARG}" ;;
    s) override_wallet_seed="${OPTARG}" ;;
    n) override_target_network="${OPTARG}" ;;
    k) override_api_key="${OPTARG}" ;;
    C) override_cache_dir="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( $# < 1 )); then
  _msg_error \
    "no URI given" \
    0
  _set_overrides
  _usage \
    1
fi
if (( 0 < $# )); then
  _set \
    "target" \
    "uri" \
    "${1}"
fi
_set_overrides
_show_config
app_opts=(
  "$( \
    _get \
      "fs" \
      "address")"
  "$( \
    _get \
      "fs" \
      "version")"
  "$(_get \
       "deployments" \
       "dir")"
  "$( \
    _get \
      "wallet" \
      "name")"
  "$( \
    _get \
      "wallet" \
      "path")"
  "$( \
    _get \
      "wallet" \
      "password")"
  "$( \
    _get \
      "wallet" \
      "seed")"
  "$( \
    _get \
      "target" \
      "network")"
  "$( \
    _get \
      "api" \
      "key")"
  "$( \
    _get \
      "cache" \
      "dir")"
  "$( \
    _get \
      "target" \
      "uri")"
  "$( \
    _get \
      "output" \
      "file")"
)
_evmfs_get \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
