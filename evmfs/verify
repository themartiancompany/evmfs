#!/usr/bin/env node

// SPDX-License-Identifier: AGPL-3.0-or-later

//    ----------------------------------------------------------------------
//    Copyright Â© 2024, 2025  Pellegrino Prevete
//
//    All rights reserved
//    ----------------------------------------------------------------------
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <https://www.gnu.org/licenses/>.

_printf =
  process.stdout.write;
const
  _libcrash =
  require(
    '../libcrash-js/crash-js');
_dirname =
  _libcrash._dirname;
_file_read =
  _libcrash._file_read;
_file_exists =
  _libcrash._file_exists;
_path_join =
  _libcrash._path_join;
_msg_info =
  _libcrash._msg_info;
_msg_error =
  _libcrash._msg_error;
const
  _check_module =
    require(
      "./check");
_chunk_get =
  _check_module._check;
_chunk_file_path_check =
  _file_exists;

function
  _global_variables() {
  app_name =
    "verify";
  retries_max =
    '';
  api_key_path =
    "";
  target_network =
    "";
  contract_address =
    "";
  contract_abi_path =
    "";
  contract_bytecode_path =
    "";
  contract_compiler_output_path =
    "";
  publication_namespace =
    "";
  file_hash =
    "";
  chunks_file_paths_prefix =
    ""
  chunks_indexes =
    [];
  quiet =
    "";
}

function
  _msg_info_chunk_verify(
    _index,
    _progress,
    _total) {
  let
    _msg,
    _template;
  _template =
    "Verifying chunk '{_index}' ('{_progress}'of '{_total}').";
  _msg =
    _template.replaceAll(
      "{_index}",
      _index);
  _msg =
    _msg.replaceAll(
      "{_progress}",
      _progress);
  _msg =
    _msg.replaceAll(
      "{_total}",
      _total);
  _msg_info(
    _msg);
}

function
  _msg_info_chunk_verified(
    _index,
    _progress,
    _total) {
  let
    _msg,
    _template;
  _template =
    "Verified chunk '{_index}' ('{_progress}'of '{_total}').";
  _msg =
    _template.replaceAll(
      "{_index}",
      _index);
  _msg =
    _msg.replaceAll(
      "{_progress}",
      _progress);
  _msg =
    _msg.replaceAll(
      "{_total}",
      _total);
  _msg_info(
    _msg);
}

function
  _msg_error_chunk_corrupted(
    _index,
    _chunk_file_path,
    _progress,
    _total) {
  let
    _msg,
    _template;
  _template =
    "Chunk '{_index}' at location '{_chunk_file_path}' " +
    "corrupted ('{_progress}'of '{_total}').";
  _msg =
    _template.replaceAll(
      "{_index}",
      _index);
  _msg =
    _msg.replaceAll(
      "{_chunk_file_path}",
      _chunk_file_path);
  _msg =
    _msg.replaceAll(
      "{_progress}",
      _progress);
  _msg =
    _msg.replaceAll(
      "{_total}",
      _total);
  _msg_error(
    _msg,
    1)
}


function
  _error_handle(
    error) {
  let
    _message;
  if ( 'error' in error && 
       error['error'] != undefined &&
       'message' in error['error'] ) {
    _message =
      error['error']['message'];
  }
  else if ( 'shortMessage' in error ) {
    _message =
      error['shortMessage'];
  }
  _msg_error(
    _message,
    0);
}

function
  _chunk_file_path_get(
    _prefix,
    _index) {
  let
    _chunk_no,
    _path;
  _chunk_no =
    _index + 1;
  _path =
    _prefix.concat(
      ".{_chunk_no}".replaceAll(
        "{_chunk_no}",
        _chunk_no));
  return _path;
}

async function
  _verify(
    _retries_max,
    _api_key_path,
    _target_network,
    _contract_address,
    _contract_abi_path,
    _contract_bytecode_path,
    _contract_compiler_output_path,
    _publication_namespace,
    _file_hash,
    _chunks_files_paths_prefix,
    _chunks_indexes
  ) {
  let
    _chunk,
    _chunk_file_path,
    _chunks_corrupted,
    _chunks_total,
    _correct,
    _cursor,
    _progress;
  _chunks_total =
    _chunks_indexes.length;
  for ( _cursor in _chunks_indexes ) {
    _progress =
      _cursor + 1;
    _index =
      _chunks_indexes[
        _cursor];
    _msg_info_chunk_verify(
      _index,
      _progress,
      _chunks_total);
    _chunk_file_path =
      _chunk_file_path_get(
        _chunks_files_paths_prefix,
        _index);
    _chunk_file_path_check(
      _chunk_file_path);
    _correct = await
      _check(
        _retries_max,
        _api_key_path,
        _target_network,
        _contract_address,
        _contract_abi_path,
        _contract_bytecode_path,
        _contract_compiler_output_path,
        _publication_namespace,
        _file_hash,
        _index,
        _index,
        [_chunk_file_path]); 
    if ( _correct == false ) {
      // Temporary
      _msg_error_chunk_corrupted(
        _index,
        _chunk_file_path,
        _progress,
        _total);
      // Soon
      _chunks_corrupted.push(
        _index);
    }
  }
  return _chunks_corrupted;
}

function
  _config_show() {
  let
    _chunks_indexes,
    _line,
    _text;
  _text = 
    [];
  _text.push(
    "          Maximum retries: {retries_max}".replace(
      "{retries_max}",
      retries_max));
  _text.push(
    "                  API Key: {api_key_path}".replace(
      "{api_key_path}",
      api_key_path));
  _text.push(
    "           Target network: {target_network}".replace(
      "{target_network}",
      target_network));
  _text.push(
    "         Contract address: {contract_address}".replace(
      "{contract_address}",
      contract_address));
  _text.push(
    "             Contract ABI: {contract_abi_path}".replace(
      "{contract_abi_path}",
      contract_abi_path));
  _text.push(
    "        Contract bytecode: {contract_bytecode_path}".replace(
      "{contract_bytecode_path}",
      contract_bytecode_path));
  _text.push(
    " Contract compiler output: {contract_compiler_output_path}".replace(
      "{contract_compiler_output_path}",
      contract_compiler_output_path));
  _text.push(
    "    Publication namespace: {publication_namespace}".replace(
      "{publication_namespace}",
      publication_namespace));
  _text.push(
    "                File hash: {file_hash}".replace(
      "{file_hash}",
      file_hash));
  _text.push(
    "Chunks files paths prefix: {index_start}".replace(
      "{index_start}",
      index_start));
  _chunks_indexes =
    chunks_indexes.join(
    " ");
  _text.push(
    "           Chunks indexes: {_chunks_files_paths}".replace(
      "{_chunks_files_paths}",
      _chunks_indexes));
  for ( _line in _text ) {
    _msg_info(
      _text[_line]);
  }
}

function
  _usage(
    _exit) {
  let
    _line,
    _text;
  _text = [
    "Verify published chunks of an EVMFS file.",
    "",
    "Usage:",
    "  verify",
    "    <quiet>",
    "    <retries_max>",
    "    <api_key_path>",
    "    <target_network>",
    "    <contract_address>",
    "    <contract_abi_path>",
    "    <contract_bytecode_path>",
    "    <contract_compiler_output_path>",
    "    <publication_namespace>",
    "    <index_start>",
    "    <file_hash>",
    "    <chunks_files_paths_prefix>",
    "    [chunks_indexes]",
    "",
    "Args:",
    "  <quiet>                          Can be 'y' or 'n'",
    "                                   Default: y",
    "  <retries_max>                    Maximum number of retries before",
    "                                   failing (not implemented).",
    "  <api_key_path>                   Path of the API key for the",
    "                                   contract ABI provider service.",
    "  <target_network>                 Network on which the contract",
    "                                   resides.",
    "  <contract_address>               Address of the contract.",
    "  <contract_abi_path>              Contract ABI path.",
    "  <contract_bytecode_path>         Path for the contract bytecode.",
    "  <contract_compiler_output_path>  Path for the contract compiler",
    "                                   output path (the hardhat artifact).",
    "  <publication_namespace>          Namespace in which the file will be",
    "                                   published.",
    "  <file_hash>                      Hash of the file to publish.",
    "  <chunks_files_paths_prefix>      Chunks files paths prefix.",
    "  [chunks_indexes]                 Indexes of the chunks to verify.",
  ];
  for ( _line of _text ) {
    _msg_info(
      _line);
  }
  process.exit(
    _exit);
}

function 
  _cmdline_parse() {
  quiet = 
    "y";
  process.argv.forEach(
    function (
      _value,
      _index,
      _array) {
      if ( _index == 2 ) {
        quiet =
          _value;
      }
      if ( _index == 3 ) {
        retries_max =
          _value;
      }
      if ( _index == 4 ) {
        api_key_path =
          _value;
      }
      if ( _index == 5 ) {
        target_network =
          _value;
      }
      if ( _index == 6 ) {
        contract_address =
          _value;
      }
      if ( _index == 7 ) {
        contract_abi_path =
          _value;
      }
      if ( _index == 8 ) {
        contract_bytecode_path =
          _value;
      }
      if ( _index == 9 ) {
        contract_compiler_output_path =
          _value;
      }
      if ( _index == 10 ) {
        publication_namespace =
          _value;
      }
      if ( _index == 11 ) {
        file_hash =
          _value;
      }
      if ( _index == 12 ) {
        chunks_files_paths_prefix =
          _value;
      }
      if ( 12 < _index ) {
	chunks_indexes.push(
          _value);
      }
      if ( _value == "-h" ||
           _value == "--help" ) {
        _usage(
	  0);
      }
  });
  if ( file_hash == "" ||
       publication_namespace == "" ) {
    _usage(
      1);
  }
}

async function
  _verify_cmdline(
    _app_opts) {
  let
    _chunks_corrupted,
    _index;
  _chunks_corrupted = 
    await _verify.apply(
      null,
      _app_opts);
  for ( _index of _chunks_corrupted ) {
    _printf(
      _index.toString());
  }
}

_global_variables();

if ( require.main == module ) {
  _cmdline_parse();
  _config_show();
  app_opts = [
    retries_max,
    api_key_path,
    target_network,
    contract_address,
    contract_abi_path,
    contract_bytecode_path,
    contract_compiler_output_path,
    publication_namespace,
    file_hash,
    chunks_files_paths_prefix,
    chunk_indexes,
  ];
  _verify.apply(
    null,
    app_opts);
}

module.exports = {
  _chunk_verify:
    _chunk_verify,
  _verify:
    _verify
};
